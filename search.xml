<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Microsoft Office 2019 官方镜像下载地址合集</title>
    <url>/2021/05/09/Microsoft%20Office%202019%20%E5%AE%98%E6%96%B9%E9%95%9C%E5%83%8F%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<h5 id="Office2019下载地址合集"><a href="#Office2019下载地址合集" class="headerlink" title="Office2019下载地址合集"></a>Office2019下载地址合集</h5><p><em>说明：仅支持Win10系统，img镜像Win10下直接装载打开即可。</em></p>
<h5 id="一、专业增强版（强烈推荐）："><a href="#一、专业增强版（强烈推荐）：" class="headerlink" title="一、专业增强版（强烈推荐）："></a>一、专业增强版（强烈推荐）：</h5><p><a href="http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/ProPlus2019Retail.img" target="_blank" rel="noopener">http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/ProPlus2019Retail.img</a></p>
<h5 id="二、专业版："><a href="#二、专业版：" class="headerlink" title="二、专业版："></a>二、专业版：</h5><p><a href="http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/Professional2019Retail.img" target="_blank" rel="noopener">http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/Professional2019Retail.img</a></p>
<h5 id="三、家庭学生版："><a href="#三、家庭学生版：" class="headerlink" title="三、家庭学生版："></a>三、家庭学生版：</h5><p><a href="http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/HomeStudent2019Retail.img" target="_blank" rel="noopener">http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/HomeStudent2019Retail.img</a></p>
<h5 id="四、家庭企业版："><a href="#四、家庭企业版：" class="headerlink" title="四、家庭企业版："></a>四、家庭企业版：</h5><p><a href="http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/HomeBusiness2019Retail.img" target="_blank" rel="noopener">http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/HomeBusiness2019Retail.img</a></p>
<h5 id="五、独立版（不推荐）："><a href="#五、独立版（不推荐）：" class="headerlink" title="五、独立版（不推荐）："></a>五、独立版（不推荐）：</h5><p><strong>Word</strong>：<br><a href="http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/Word2019Retail.img" target="_blank" rel="noopener">http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/Word2019Retail.img</a></p>
<p><strong>Excel：</strong><br>[<a href="http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/Excel2019Retail.imgPowerPoint：" target="_blank" rel="noopener">http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/Excel2019Retail.imgPowerPoint：</a> <a href="http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/PowerPoint2019Retail.img]" target="_blank" rel="noopener">http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/PowerPoint2019Retail.img]</a>(<a href="http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/Excel2019Retail.imgPowerPoint：" target="_blank" rel="noopener">http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/Excel2019Retail.imgPowerPoint：</a> <a href="http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/PowerPoint2019Retail.img" target="_blank" rel="noopener">http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/PowerPoint2019Retail.img</a>)</p>
<p><strong>Outlook：</strong><br><a href="http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/Outlook2019Retail.img" target="_blank" rel="noopener">http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/Outlook2019Retail.img</a></p>
<p><strong>Access：</strong><br><a href="http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/Access2019Retail.img" target="_blank" rel="noopener">http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/Access2019Retail.img</a></p>
<p><strong>Publisher：</strong><br><a href="http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/Publisher2019Retail.img" target="_blank" rel="noopener">http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/Publisher2019Retail.img</a></p>
<p><strong>Project标准：</strong><br><a href="http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/ProjectStd2019Retail.img" target="_blank" rel="noopener">http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/ProjectStd2019Retail.img</a></p>
<p><strong>Project专业版：</strong><br><a href="http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/ProjectPro2019Retail.img" target="_blank" rel="noopener">http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/ProjectPro2019Retail.img</a></p>
<p><strong>Visio标准版</strong>：<br><a href="http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/VisioStd2019Retail.img" target="_blank" rel="noopener">http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/VisioStd2019Retail.img</a></p>
<p><strong>Visio专业版：</strong><br><a href="http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/VisioPro2019Retail.img" target="_blank" rel="noopener">http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/VisioPro2019Retail.img</a></p>
<h5 id="激活工具："><a href="#激活工具：" class="headerlink" title="激活工具："></a>激活工具：</h5><p><a href="https://jumpshare.com/v/vfeGGxXAm0ln4KkaglG2" target="_blank" rel="noopener">https://jumpshare.com/v/vfeGGxXAm0ln4KkaglG2</a></p>
<p><strong>若上面链接失效，请下载：</strong><br><a href="https://wwx.lanzoux.com/iUic6krg3ne" target="_blank" rel="noopener">https://wwx.lanzoux.com/iUic6krg3ne</a></p>
<h5 id="安装过程："><a href="#安装过程：" class="headerlink" title="安装过程："></a>安装过程：</h5><p>1.镜像文件下载好后点击”右键“–”“装载”<br>2.点击setup安装，安装完成后点击“文件”–”账户”，显示需要激活<br><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/img/office%E6%BF%80%E6%B4%BB2.jpg?raw=true" alt=""><br>3.运行激活工具，点击“KMSAuto Lite”–”激活office”即可<br><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/img/office%E6%BF%80%E6%B4%BB11.jpg?raw=true" alt=""></p>
]]></content>
  </entry>
  <entry>
    <title>分享一个永久免费科学上网的方法</title>
    <url>/2020/12/30/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E6%B0%B8%E4%B9%85%E5%85%8D%E8%B4%B9%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>今天给大家分享一个永久免费科学上网的方法，这是一个chrome插件：hide my ip vpn</strong></p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/2lCTBCy72b0" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h3 id="下载、安装插件"><a href="#下载、安装插件" class="headerlink" title="下载、安装插件"></a>下载、安装插件</h3><h4 id="受限环境下"><a href="#受限环境下" class="headerlink" title="受限环境下"></a>受限环境下</h4><p><strong>1. 访问：<a href="https://chrome-extension-downloader.com/" target="_blank" rel="noopener">https://chrome-extension-downloader.com/</a><br>2. 在搜索框中输入：keodbianoliadkoelloecbhllnpiocoi?hl=zh-CN<br>3. 点击“Download extension”直接下载即可<br>4. 下载完成后，将.crx后缀名改为.zip，然后解压缩。<br>5. 打开chrome浏览器的扩展程序，之后点击“加载已解压的扩展程序”即可安装成功</strong></p>
<h4 id="自由环境下"><a href="#自由环境下" class="headerlink" title="自由环境下"></a>自由环境下</h4><p><strong>打开chrome应用商店，搜索：hide my ip ，点击“添加到chrome即可”</strong></p>
]]></content>
  </entry>
  <entry>
    <title>手动搭建vless+tcp+tls</title>
    <url>/2020/08/24/%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BAvless+tcp+tls/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>v2ray的官网转移到了<a href="https://www.v2fly.org/" target="_blank" rel="noopener">https://www.v2fly.org/</a>，而且添加了新的传输协议：vless,VLESS 是一个无状态的轻量传输协议，它分为入站和出站两部分，可以作为 V2Ray 客户端和服务器之间的桥梁。</strong></p>
<h3 id="vmess和vless的区别"><a href="#vmess和vless的区别" class="headerlink" title="vmess和vless的区别"></a>vmess和vless的区别</h3><p><strong>vless与VMess 不同，VLESS 不依赖于系统时间，认证方式同样为 UUID，但不需要 alterId</strong>。</p>
<p><strong>官方附加说明：尽管 Websocket+TLS+Web 可能称得上是现阶段最好的方案，但绝对不是推荐新手一上来就尝试的方案，更不是 V2Ray 唯一的用法。同时，你应当了解，每个地区的网络状况不同 (主要指对不同协议的 QoS 程度)，你可以将所有配置都尝试一遍来寻找最适合自己的，尽量少问、最好不问“为什么我的 V2Ray 这么慢？”这样的问题。</strong></p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/SYAuvtF9wMY" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h3 id="准备条件："><a href="#准备条件：" class="headerlink" title="准备条件："></a>准备条件：</h3><p>1.一个vps，我使用谷歌云演示<br>2.一个域名（不会申请域名的小伙伴可以看这个视频：）,域名和vps的ip地址关联成功</p>
<h3 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h3><h4 id="一、安装acme-sh脚本"><a href="#一、安装acme-sh脚本" class="headerlink" title="一、安装acme.sh脚本"></a>一、安装acme.sh脚本</h4><h5 id="1-先切换到root"><a href="#1-先切换到root" class="headerlink" title="1.先切换到root"></a>1.先切换到root</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure>

<h5 id="2-安装依赖，debian或ubuntu执行："><a href="#2-安装依赖，debian或ubuntu执行：" class="headerlink" title="2.安装依赖，debian或ubuntu执行："></a>2.安装依赖，debian或ubuntu执行：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get -y install socat</span><br></pre></td></tr></table></figure>
<p>centos执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum update &amp;&amp;  yum -y install socat</span><br></pre></td></tr></table></figure>
<h5 id="3-安装acme-sh脚本："><a href="#3-安装acme-sh脚本：" class="headerlink" title="3.安装acme.sh脚本："></a>3.安装acme.sh脚本：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;get.acme.sh | sh</span><br></pre></td></tr></table></figure>
<p><strong>出现：Install success!表示安装成功</strong></p>
<h5 id="4-让环境变量生效，以后无论在哪个路径，直接使用acme-sh"><a href="#4-让环境变量生效，以后无论在哪个路径，直接使用acme-sh" class="headerlink" title="4.让环境变量生效，以后无论在哪个路径，直接使用acme.sh"></a>4.让环境变量生效，以后无论在哪个路径，直接使用acme.sh</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>
<h4 id="二、用acme-sh脚本申请证书"><a href="#二、用acme-sh脚本申请证书" class="headerlink" title="二、用acme.sh脚本申请证书"></a>二、用acme.sh脚本申请证书</h4><h5 id="1-开始签发证书-注意请将example-com替换成你的域名"><a href="#1-开始签发证书-注意请将example-com替换成你的域名" class="headerlink" title="1.开始签发证书,注意请将example.com替换成你的域名"></a>1.开始签发证书,注意请将example.com替换成你的域名</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh --issue -d example.com --standalone -k ec-256 --force</span><br></pre></td></tr></table></figure>
<p>出现下图说明你的证书签发成功<br><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/trojan-go-001.jpg?raw=true" alt=""></p>
<h5 id="2-创建一个目录用于存放你的证书-注意请将example-com替换成你的域名"><a href="#2-创建一个目录用于存放你的证书-注意请将example-com替换成你的域名" class="headerlink" title="2.创建一个目录用于存放你的证书,注意请将example.com替换成你的域名"></a>2.创建一个目录用于存放你的证书,注意请将example.com替换成你的域名</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;data</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;data&#x2F;example.com</span><br></pre></td></tr></table></figure>
<h4 id="三、复制-安装证书"><a href="#三、复制-安装证书" class="headerlink" title="三、复制/安装证书"></a>三、复制/安装证书</h4><p>注意请将example.com替换成你的域名 <strong>(共4处)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh --installcert -d example.com --fullchainpath &#x2F;data&#x2F;example.com&#x2F;fullchain.crt --keypath &#x2F;data&#x2F;example.com&#x2F;example.com.key --ecc --force</span><br></pre></td></tr></table></figure>
<p><strong>至此，tls证书签发成功！！！</strong></p>
<h4 id="四、证书更新"><a href="#四、证书更新" class="headerlink" title="四、证书更新"></a>四、证书更新</h4><p>关于从Letsencrypt申请到的证书，有效期为90天，脚本会每60天自动更新证书，你无须进行任何操作，今后可能会缩短这个时间，不过都是自动的，你不用关心。</p>
<h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><h4 id="1-安装依赖包"><a href="#1-安装依赖包" class="headerlink" title="1.安装依赖包"></a>1.安装依赖包</h4><p><strong>下载/安装 openssl-1.1.1（使 nginx 支持TLS 1.3）</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;src</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -nc --no-check-certificate https:&#x2F;&#x2F;www.openssl.org&#x2F;source&#x2F;openssl-1.1.1g.tar.gz -P &#x2F;usr&#x2F;local&#x2F;src</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf  &#x2F;usr&#x2F;local&#x2F;src&#x2F;openssl-1.1.1g.tar.gz  -C &#x2F;usr&#x2F;local&#x2F;src</span><br></pre></td></tr></table></figure>
<p> <strong>其他依赖</strong><br>debian和ubuntu执行下面语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt  -y install build-essential libpcre3 libpcre3-dev zlib1g-dev git  dbus manpages-dev aptitude g++</span><br></pre></td></tr></table></figure>
<p>centos执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y groupinstall &quot;Development tools&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install pcre pcre-devel zlib-devel epel-release gcc gcc-c++</span><br></pre></td></tr></table></figure>
<h4 id="2-下载解压nginx源码"><a href="#2-下载解压nginx源码" class="headerlink" title="2.下载解压nginx源码"></a>2.下载解压nginx源码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -nc --no-check-certificate http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.18.0.tar.gz -P &#x2F;usr&#x2F;local&#x2F;src</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf &#x2F;usr&#x2F;local&#x2F;src&#x2F;nginx-1.18.0.tar.gz -C &#x2F;usr&#x2F;local&#x2F;src</span><br></pre></td></tr></table></figure>
<h4 id="3-编译和安装nginx"><a href="#3-编译和安装nginx" class="headerlink" title="3.编译和安装nginx"></a>3.编译和安装nginx</h4><p><strong>编译配置</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;src&#x2F;nginx-1.18.0</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;etc&#x2F;nginx</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;etc&#x2F;nginx \</span><br><span class="line">        --with-http_ssl_module \</span><br><span class="line">        --with-http_gzip_static_module \</span><br><span class="line">        --with-http_stub_status_module \</span><br><span class="line">        --with-pcre \</span><br><span class="line">        --with-http_realip_module \</span><br><span class="line">        --with-http_flv_module \</span><br><span class="line">        --with-http_mp4_module \</span><br><span class="line">        --with-http_secure_link_module \</span><br><span class="line">        --with-http_v2_module \</span><br><span class="line">        --with-cc-opt&#x3D;&#39;-O3&#39; \</span><br><span class="line">        --with-openssl&#x3D;..&#x2F;openssl-1.1.1g</span><br></pre></td></tr></table></figure>
<p> <strong>.编译&amp;&amp;安装</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<p><strong>修改基本配置</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -i &#39;s&#x2F;#user  nobody;&#x2F;user  root;&#x2F;&#39; &#x2F;etc&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br><span class="line">sed -i &#39;s&#x2F;worker_processes  1;&#x2F;worker_processes  3;&#x2F;&#39; &#x2F;etc&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br><span class="line">sed -i &#39;s&#x2F;    worker_connections  1024;&#x2F;    worker_connections  4096;&#x2F;&#39; &#x2F;etc&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br><span class="line">sed -i &#39;$i include conf.d&#x2F;*.conf;&#39; &#x2F;etc&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br><span class="line">sed -i &#39;&#x2F;listen       80;&#x2F;a\       return 301 https:&#x2F;&#x2F;$http_host$request_uri;&#39; &#x2F;etc&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br></pre></td></tr></table></figure>
<p> <strong>删除临时文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -rf &#x2F;usr&#x2F;local&#x2F;src&#x2F;nginx-1.18.0</span><br><span class="line">rm -rf &#x2F;usr&#x2F;local&#x2F;src&#x2F;nginx-1.18.0.tar.gz </span><br><span class="line">rm -rf &#x2F;usr&#x2F;local&#x2F;src&#x2F;openssl-1.1.1g</span><br><span class="line">rm -rf &#x2F;usr&#x2F;local&#x2F;src&#x2F;openssl-1.1.1g.tar.gz</span><br></pre></td></tr></table></figure>
<p><strong>添加配置文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;etc&#x2F;nginx&#x2F;conf&#x2F;conf.d</span><br></pre></td></tr></table></figure>

<p><strong>注意：将下面代码中的端口号、域名和伪装网站目录修改成你自己的</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> cat &gt;&#x2F;etc&#x2F;nginx&#x2F;conf&#x2F;conf.d&#x2F;default.conf &lt;&lt;EOF</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 自定义一个1-65535的端口，不能是443;</span><br><span class="line">    server_name 你的域名;</span><br><span class="line">    root &#x2F;usr&#x2F;wwwroot;</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate   &#x2F;data&#x2F;example.com&#x2F;fullchain.crt;</span><br><span class="line">    ssl_certificate_key  &#x2F;data&#x2F;example.com&#x2F;example.com.key;</span><br><span class="line">	ssl_ciphers                 TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers    on;</span><br><span class="line">    ssl_protocols                TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class="line">    ssl_session_cache            shared:SSL:50m;</span><br><span class="line">    ssl_session_timeout          1d;</span><br><span class="line">    ssl_session_tickets          on;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h4 id="4-配置nginx服务"><a href="#4-配置nginx服务" class="headerlink" title="4.配置nginx服务"></a>4.配置nginx服务</h4><p><strong>创建服务文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;nginx.service &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;The NGINX HTTP and reverse proxy server</span><br><span class="line">After&#x3D;syslog.target network.target remote-fs.target nss-lookup.target</span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;forking</span><br><span class="line">PIDFile&#x3D;&#x2F;etc&#x2F;nginx&#x2F;logs&#x2F;nginx.pid</span><br><span class="line">ExecStartPre&#x3D;&#x2F;etc&#x2F;nginx&#x2F;sbin&#x2F;nginx -t</span><br><span class="line">ExecStart&#x3D;&#x2F;etc&#x2F;nginx&#x2F;sbin&#x2F;nginx -c &#x2F;etc&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br><span class="line">ExecReload&#x3D;&#x2F;etc&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload</span><br><span class="line">ExecStop&#x3D;&#x2F;bin&#x2F;kill -s QUIT \$MAINPID</span><br><span class="line">PrivateTmp&#x3D;true</span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p><strong>加载并启动nginx</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable nginx</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure>
<p><strong>其他命令</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start nginx  -启动</span><br><span class="line">systemctl stop nginx  -停止</span><br></pre></td></tr></table></figure>
<h3 id="安装伪装网站"><a href="#安装伪装网站" class="headerlink" title="安装伪装网站"></a>安装伪装网站</h3><p><strong>创建伪装网站目录</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;usr&#x2F;wwwroot</span><br></pre></td></tr></table></figure>
<p><strong>下载伪装网站</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone  https:&#x2F;&#x2F;github.com&#x2F;JeannieStudio&#x2F;Programming.git &#x2F;usr&#x2F;wwwroot</span><br></pre></td></tr></table></figure>

<h3 id="安装v2ray"><a href="#安装v2ray" class="headerlink" title="安装v2ray"></a>安装v2ray</h3><p><strong>用官方快速安装脚本，地址：</strong><a href="https://github.com/v2fly/fhs-install-v2ray" target="_blank" rel="noopener">https://github.com/v2fly/fhs-install-v2ray</a></p>
<p><strong>安装cURL</strong><br>debian或ubuntu:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install curl</span><br></pre></td></tr></table></figure>
<p>centOS：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum makecache</span><br><span class="line">yum install curl</span><br></pre></td></tr></table></figure>
<p><strong>使用一键脚本下载并安装v2ray</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -O https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;v2fly&#x2F;fhs-install-v2ray&#x2F;master&#x2F;install-release.sh</span><br><span class="line">curl -O https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;v2fly&#x2F;fhs-install-v2ray&#x2F;master&#x2F;install-dat-release.sh</span><br></pre></td></tr></table></figure>
<p><strong>安装完成以后要修改一下后台服务文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;v2ray.service &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;V2Ray Service</span><br><span class="line">After&#x3D;network.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User&#x3D;root</span><br><span class="line">CapabilityBoundingSet&#x3D;CAP_NET_ADMIN CAP_NET_BIND_SERVICE</span><br><span class="line">AmbientCapabilities&#x3D;CAP_NET_ADMIN CAP_NET_BIND_SERVICE</span><br><span class="line">NoNewPrivileges&#x3D;true</span><br><span class="line">Environment&#x3D;V2RAY_LOCATION_ASSET&#x3D;&#x2F;usr&#x2F;local&#x2F;share&#x2F;v2ray&#x2F;</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;v2ray -config &#x2F;usr&#x2F;local&#x2F;etc&#x2F;v2ray&#x2F;config.json</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h4 id="配置v2ray"><a href="#配置v2ray" class="headerlink" title="配置v2ray"></a>配置v2ray</h4><p>参考官方给的配置即可：<a href="https://github.com/v2fly/v2ray-examples" target="_blank" rel="noopener">https://github.com/v2fly/v2ray-examples</a><br>生成uuid的命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;uuid</span><br></pre></td></tr></table></figure>
<p>配置v2ray服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt;&#x2F;usr&#x2F;local&#x2F;etc&#x2F;v2ray&#x2F;config.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;log&quot;: &#123;</span><br><span class="line">        &quot;loglevel&quot;: &quot;warning&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;inbounds&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;port&quot;: 443,</span><br><span class="line">            &quot;protocol&quot;: &quot;vless&quot;,</span><br><span class="line">            &quot;settings&quot;: &#123;</span><br><span class="line">                &quot;clients&quot;: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;id&quot;: &quot;&quot;, &#x2F;&#x2F; 填写你的 UUID</span><br><span class="line">                        &quot;level&quot;: 0,</span><br><span class="line">                        &quot;email&quot;: &quot;love@v2fly.org&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                &quot;decryption&quot;: &quot;none&quot;,</span><br><span class="line">                &quot;fallbacks&quot;: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;dest&quot;: &quot;&#x2F;dev&#x2F;shm&#x2F;default.sock&quot;,</span><br><span class="line">                        &quot;xver&quot;: 1</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;alpn&quot;: &quot;h2&quot;,</span><br><span class="line">                        &quot;dest&quot;: &quot;&#x2F;dev&#x2F;shm&#x2F;h2.sock&quot;,</span><br><span class="line">                        &quot;xver&quot;: 1</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;streamSettings&quot;: &#123;</span><br><span class="line">                &quot;network&quot;: &quot;tcp&quot;,</span><br><span class="line">                &quot;security&quot;: &quot;tls&quot;,</span><br><span class="line">                &quot;tlsSettings&quot;: &#123;</span><br><span class="line">                    &quot;alpn&quot;: [</span><br><span class="line">                        &quot;h2&quot;,</span><br><span class="line">                        &quot;http&#x2F;1.1&quot;</span><br><span class="line">                    ],</span><br><span class="line">                    &quot;certificates&quot;: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;certificateFile&quot;: &quot;&#x2F;path&#x2F;to&#x2F;fullchain.crt&quot;, &#x2F;&#x2F; 换成你的证书，绝对路径</span><br><span class="line">                            &quot;keyFile&quot;: &quot;&#x2F;path&#x2F;to&#x2F;example.com.key&quot; &#x2F;&#x2F; 换成你的私钥，绝对路径</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;outbounds&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;protocol&quot;: &quot;freedom&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable v2ray</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart v2ray</span><br></pre></td></tr></table></figure>

<p>相关命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start v2ray    启动v2ray</span><br><span class="line">systemctl stop v2ray     停止v2ray</span><br><span class="line">systemctl status v2ray   查看v2ray状态</span><br></pre></td></tr></table></figure>
<h3 id="客户端下载和配置"><a href="#客户端下载和配置" class="headerlink" title="客户端下载和配置"></a>客户端下载和配置</h3><p><strong>1.win平台：</strong><br>下载Qv2ray，使用手册：这里：<a href="https://qv2ray.net/getting-started/" target="_blank" rel="noopener">https://qv2ray.net/getting-started/</a></p>
<p>（1）下载Qv2ray: <a href="https://github.com/Qv2ray/Qv2ray/releases" target="_blank" rel="noopener">https://github.com/Qv2ray/Qv2ray/releases</a></p>
<p>windows用户下载：Qv2ray.v2.6.3.Windows-x64.7z，并解压即可。</p>
<h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E6%8D%90%E5%8A%A92.png?raw=true" alt=""></p>
]]></content>
  </entry>
  <entry>
    <title>clash小猫咪的安装和使用</title>
    <url>/2020/07/31/clash%E5%B0%8F%E7%8C%AB%E5%92%AA%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="clash简介"><a href="#clash简介" class="headerlink" title="clash简介"></a>clash简介</h2><p><strong><em>clash(又称小猫咪)，是一款客户端代理软件，大家都应该用过windows客户端代理软件shadowsocks、v2rayN、Trojan-Qt5等，clash就和这些软件的功能类似，但又不完全一样。</em></strong></p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/wdzI_3xbhxQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h3 id="1-如下图为ss的客户端："><a href="#1-如下图为ss的客户端：" class="headerlink" title="1.如下图为ss的客户端："></a>1.如下图为ss的客户端：</h3><p><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p>
<p><img src="https://raw.githubusercontent.com/JeannieStudio/jeanniestudio.images/master/img/ss.png" alt=""></p>
<h3 id="2-如下图为v2rayN的客户端："><a href="#2-如下图为v2rayN的客户端：" class="headerlink" title="2.如下图为v2rayN的客户端："></a>2.如下图为v2rayN的客户端：</h3><p><a href="https://github.com/2dust/v2rayN/releases" target="_blank" rel="noopener">https://github.com/2dust/v2rayN/releases</a><br><img src="https://raw.githubusercontent.com/JeannieStudio/jeanniestudio.images/master/img/v2rayN.jpg" alt=""></p>
<h3 id="3-下图为trojan和trojan-go的客户端"><a href="#3-下图为trojan和trojan-go的客户端" class="headerlink" title="3.下图为trojan和trojan-go的客户端"></a>3.下图为trojan和trojan-go的客户端</h3><p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/img/trojan.jpg?raw=true" alt=""></p>
<h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><p>之前在服务器搭建好了ss、v2ray、trojan等，各种代理的客户端软件不能互相兼容，各自都有不同的软件（同上），但clash这一个软件就可以支持这三种不同的搭建方式的代理。</p>
<h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><p>1.配置文件稍显复杂。<br>2.暂时不支持ssr的客户端代理。</p>
<h2 id="clash配置"><a href="#clash配置" class="headerlink" title="clash配置"></a>clash配置</h2><h3 id="一-windows平台的配置"><a href="#一-windows平台的配置" class="headerlink" title="一.windows平台的配置"></a>一.windows平台的配置</h3><h3 id="1-clash-for-windows客户端的下载："><a href="#1-clash-for-windows客户端的下载：" class="headerlink" title="1.clash for windows客户端的下载："></a>1.clash for windows客户端的下载：</h3><p>从<a href="https://github.com/Fndroid/clash_for_windows_pkg/releases" target="_blank" rel="noopener">这里</a>下载即可：<br><a href="https://github.com/Fndroid/clash_for_windows_pkg/releases" target="_blank" rel="noopener">https://github.com/Fndroid/clash_for_windows_pkg/releases</a></p>
<h4 id="2-模板的下载："><a href="#2-模板的下载：" class="headerlink" title="2.模板的下载："></a>2.模板的下载：</h4><p>这里提供一个Clash配置文件的模板，大家只需要根据这个模板修改一点内容即可。<br>模板：<a href="https://raw.githubusercontent.com/JeannieStudio/all_install/master/clash-template.yaml" target="_blank" rel="noopener">https://raw.githubusercontent.com/JeannieStudio/all_install/master/clash-template.yaml</a></p>
<h3 id="二-andoid客户端的配置"><a href="#二-andoid客户端的配置" class="headerlink" title="二.andoid客户端的配置"></a>二.andoid客户端的配置</h3><h4 id="1-安卓平台客户端下载"><a href="#1-安卓平台客户端下载" class="headerlink" title="1.安卓平台客户端下载"></a>1.安卓平台客户端下载</h4><p>从<a href="https://github.com/Kr328/ClashForAndroid/releases" target="_blank" rel="noopener">这里</a>下载即可：<br><a href="https://github.com/Kr328/ClashForAndroid/releases" target="_blank" rel="noopener">https://github.com/Kr328/ClashForAndroid/releases</a></p>
<h4 id="2-模板的使用"><a href="#2-模板的使用" class="headerlink" title="2.模板的使用"></a>2.模板的使用</h4><p>安卓客户端的模板和windows模板一毛一样，导进去即可。</p>
]]></content>
  </entry>
  <entry>
    <title>手动搭建Trojan-go+Nginx+Tls</title>
    <url>/2020/07/17/%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BATrojan-go+Nginx+Tls%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>很多小伙伴在使用一键脚本搭建trojan-go实现科学上网的时候，偶尔会出现失败的情况，不妨试试手动搭建，花几分钟而已，100%成功，何乐而不为呢?</strong></p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/kJuhXhi-xkU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h3 id="trojian和trojan-go的区别"><a href="#trojian和trojan-go的区别" class="headerlink" title="trojian和trojan-go的区别"></a>trojian和trojan-go的区别</h3><p>trojan-go:使用Go实现的完整Trojan代理，与Trojan协议以及Trojan版本的配置文件格式兼容。安全，高效，轻巧，易用。<br>但是，trojan-go具有以下2个特性是trojan不具有的：<br>1.支持使用多路复用提升并发性能<br>2.支持CDN流量中转(基于WebSocket over TLS/SSL)。</p>
<hr>
<h3 id="准备条件："><a href="#准备条件：" class="headerlink" title="准备条件："></a>准备条件：</h3><p>1.一个vps，我使用谷歌云演示<br>2.一个域名（不会申请域名的小伙伴可以看这个视频：）,域名和vps的ip地址关联成功</p>
<h3 id="申请tls证书"><a href="#申请tls证书" class="headerlink" title="申请tls证书"></a>申请tls证书</h3><h4 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h4><p>本文主要介绍使用acme.sh脚本来申请证书，并实现到期自动续订的步骤。acme.sh脚本实现了acme协议，可以从letsencrypt生成免费的证书。</p>
<h4 id="二、安装acme-sh脚本"><a href="#二、安装acme-sh脚本" class="headerlink" title="二、安装acme.sh脚本"></a>二、安装acme.sh脚本</h4><h5 id="1-先切换到root"><a href="#1-先切换到root" class="headerlink" title="1.先切换到root"></a>1.先切换到root</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure>

<h5 id="2-安装依赖，debian或ubuntu执行："><a href="#2-安装依赖，debian或ubuntu执行：" class="headerlink" title="2.安装依赖，debian或ubuntu执行："></a>2.安装依赖，debian或ubuntu执行：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get -y install socat</span><br></pre></td></tr></table></figure>
<p>centos执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum update &amp;&amp;  yum -y install socat</span><br></pre></td></tr></table></figure>
<h5 id="3-安装acme-sh脚本："><a href="#3-安装acme-sh脚本：" class="headerlink" title="3.安装acme.sh脚本："></a>3.安装acme.sh脚本：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;get.acme.sh | sh</span><br></pre></td></tr></table></figure>
<p><strong>出现：Install success!表示安装成功</strong></p>
<h5 id="4-让环境变量生效，以后无论在哪个路径，直接使用acme-sh"><a href="#4-让环境变量生效，以后无论在哪个路径，直接使用acme-sh" class="headerlink" title="4.让环境变量生效，以后无论在哪个路径，直接使用acme.sh"></a>4.让环境变量生效，以后无论在哪个路径，直接使用acme.sh</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>
<h4 id="三、用acme-sh脚本申请证书"><a href="#三、用acme-sh脚本申请证书" class="headerlink" title="三、用acme.sh脚本申请证书"></a>三、用acme.sh脚本申请证书</h4><h5 id="1-开始签发证书-注意请将example-com替换成你的域名"><a href="#1-开始签发证书-注意请将example-com替换成你的域名" class="headerlink" title="1.开始签发证书,注意请将example.com替换成你的域名"></a>1.开始签发证书,注意请将example.com替换成你的域名</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh --issue -d example.com --standalone -k ec-256 --force</span><br></pre></td></tr></table></figure>
<p>出现下图说明你的证书签发成功<br><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/trojan-go-001.jpg?raw=true" alt=""></p>
<h5 id="2-创建一个目录用于存放你的证书-注意请将example-com替换成你的域名"><a href="#2-创建一个目录用于存放你的证书-注意请将example-com替换成你的域名" class="headerlink" title="2.创建一个目录用于存放你的证书,注意请将example.com替换成你的域名"></a>2.创建一个目录用于存放你的证书,注意请将example.com替换成你的域名</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;data</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;data&#x2F;example.com</span><br></pre></td></tr></table></figure>
<h4 id="四、复制-安装证书"><a href="#四、复制-安装证书" class="headerlink" title="四、复制/安装证书"></a>四、复制/安装证书</h4><p>注意请将example.com替换成你的域名 <strong>(共3处)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh --installcert -d example.com --fullchainpath &#x2F;data&#x2F;example.com&#x2F;fullchain.crt --keypath &#x2F;data&#x2F;example.com&#x2F;privkey.key --ecc --force</span><br></pre></td></tr></table></figure>
<p><strong>至此，tls证书签发成功！！！</strong></p>
<h4 id="五、证书更新"><a href="#五、证书更新" class="headerlink" title="五、证书更新"></a>五、证书更新</h4><p>关于从Letsencrypt申请到的证书，有效期为90天，脚本会每60天自动更新证书，你无须进行任何操作，今后可能会缩短这个时间，不过都是自动的，你不用关心。</p>
<h3 id="下载伪装网站"><a href="#下载伪装网站" class="headerlink" title="下载伪装网站"></a>下载伪装网站</h3><h4 id="创建一个目录，用于放置网站"><a href="#创建一个目录，用于放置网站" class="headerlink" title="创建一个目录，用于放置网站"></a>创建一个目录，用于放置网站</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;usr&#x2F;wwwroot</span><br></pre></td></tr></table></figure>
<h4 id="下载并解压（如果下载失败了，再到这个网站https-templated-co-找一个模板下载）"><a href="#下载并解压（如果下载失败了，再到这个网站https-templated-co-找一个模板下载）" class="headerlink" title="下载并解压（如果下载失败了，再到这个网站https://templated.co/找一个模板下载）"></a>下载并解压（如果下载失败了，再到这个网站<a href="https://templated.co/" target="_blank" rel="noopener">https://templated.co/</a>找一个模板下载）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -O &#x2F;usr&#x2F;wwwroot&#x2F;web.zip --no-check-certificate https:&#x2F;&#x2F;templated.co&#x2F;intensify&#x2F;download</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unzip -o -d &#x2F;usr&#x2F;wwwroot &#x2F;usr&#x2F;wwwroot&#x2F;web.zip</span><br></pre></td></tr></table></figure>
<h3 id="编译安装nginx"><a href="#编译安装nginx" class="headerlink" title="编译安装nginx"></a>编译安装nginx</h3><h4 id="一、安装依赖包"><a href="#一、安装依赖包" class="headerlink" title="一、安装依赖包"></a>一、安装依赖包</h4><h5 id="1-下载-安装-openssl-1-1-1（使-nginx-支持TLS-1-3）"><a href="#1-下载-安装-openssl-1-1-1（使-nginx-支持TLS-1-3）" class="headerlink" title="1.下载/安装 openssl-1.1.1（使 nginx 支持TLS 1.3）"></a>1.下载/安装 openssl-1.1.1（使 nginx 支持TLS 1.3）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;src</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -nc --no-check-certificate https:&#x2F;&#x2F;www.openssl.org&#x2F;source&#x2F;openssl-1.1.1g.tar.gz -P &#x2F;usr&#x2F;local&#x2F;src</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf  &#x2F;usr&#x2F;local&#x2F;src&#x2F;openssl-1.1.1g.tar.gz  -C &#x2F;usr&#x2F;local&#x2F;src</span><br></pre></td></tr></table></figure>
<h5 id="2-其他依赖"><a href="#2-其他依赖" class="headerlink" title="2.其他依赖"></a>2.其他依赖</h5><p>debian和ubuntu执行下面语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt  -y install build-essential libpcre3 libpcre3-dev zlib1g-dev git  dbus manpages-dev aptitude g++</span><br></pre></td></tr></table></figure>
<p>centos执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y groupinstall &quot;Development tools&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install pcre pcre-devel zlib-devel epel-release gcc gcc-c++</span><br></pre></td></tr></table></figure>
<h4 id="二、下载解压nginx源码"><a href="#二、下载解压nginx源码" class="headerlink" title="二、下载解压nginx源码"></a>二、下载解压nginx源码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -nc --no-check-certificate http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.18.0.tar.gz -P &#x2F;usr&#x2F;local&#x2F;src</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf &#x2F;usr&#x2F;local&#x2F;src&#x2F;nginx-1.18.0.tar.gz -C &#x2F;usr&#x2F;local&#x2F;src</span><br></pre></td></tr></table></figure>
<h4 id="三、编译和安装nginx"><a href="#三、编译和安装nginx" class="headerlink" title="三、编译和安装nginx"></a>三、编译和安装nginx</h4><h5 id="1-编译配置"><a href="#1-编译配置" class="headerlink" title="1.编译配置"></a>1.编译配置</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;src&#x2F;nginx-1.18.0</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;etc&#x2F;nginx</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;etc&#x2F;nginx \</span><br><span class="line">        --with-http_ssl_module \</span><br><span class="line">        --with-http_gzip_static_module \</span><br><span class="line">        --with-http_stub_status_module \</span><br><span class="line">        --with-pcre \</span><br><span class="line">        --with-http_realip_module \</span><br><span class="line">        --with-http_flv_module \</span><br><span class="line">        --with-http_mp4_module \</span><br><span class="line">        --with-http_secure_link_module \</span><br><span class="line">        --with-http_v2_module \</span><br><span class="line">        --with-cc-opt&#x3D;&#39;-O3&#39; \</span><br><span class="line">        --with-openssl&#x3D;..&#x2F;openssl-1.1.1g</span><br></pre></td></tr></table></figure>
<h5 id="2-编译-amp-amp-安装"><a href="#2-编译-amp-amp-安装" class="headerlink" title="2.编译&amp;&amp;安装"></a>2.编译&amp;&amp;安装</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h5 id="3、修改基本配置"><a href="#3、修改基本配置" class="headerlink" title="3、修改基本配置"></a>3、修改基本配置</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -i &#39;s&#x2F;#user  nobody;&#x2F;user  root;&#x2F;&#39; &#x2F;etc&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br><span class="line">sed -i &#39;s&#x2F;worker_processes  1;&#x2F;worker_processes  3;&#x2F;&#39; &#x2F;etc&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br><span class="line">sed -i &#39;s&#x2F;    worker_connections  1024;&#x2F;    worker_connections  4096;&#x2F;&#39; &#x2F;etc&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br><span class="line">sed -i &#39;$i include conf.d&#x2F;*.conf;&#39; &#x2F;etc&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br></pre></td></tr></table></figure>
<h5 id="4、删除临时文件"><a href="#4、删除临时文件" class="headerlink" title="4、删除临时文件"></a>4、删除临时文件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -rf &#x2F;usr&#x2F;local&#x2F;src&#x2F;nginx-1.18.0</span><br><span class="line">rm -rf &#x2F;usr&#x2F;local&#x2F;src&#x2F;&#x2F;nginx-1.18.0.tar.gz </span><br><span class="line">rm -rf &#x2F;usr&#x2F;local&#x2F;src&#x2F;&#x2F;openssl-1.1.1g</span><br><span class="line">rm -rf &#x2F;usr&#x2F;local&#x2F;src&#x2F;openssl-1.1.1g.tar.gz</span><br></pre></td></tr></table></figure>
<h5 id="5、添加配置文件"><a href="#5、添加配置文件" class="headerlink" title="5、添加配置文件"></a>5、添加配置文件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;etc&#x2F;nginx&#x2F;conf&#x2F;conf.d</span><br></pre></td></tr></table></figure>

<p><strong>注意：将下面代码中的端口号、域名和伪装网站目录修改成你自己的</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> cat &gt;&#x2F;etc&#x2F;nginx&#x2F;conf&#x2F;conf.d&#x2F;default.conf &lt;&lt;EOF</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 1-65535之间的端口号，避开特殊端口;</span><br><span class="line">    server_name 你的域名;</span><br><span class="line">    root &#x2F;usr&#x2F;wwwroot;</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate   &#x2F;data&#x2F;example.com&#x2F;fullchain.crt;</span><br><span class="line">    ssl_certificate_key  &#x2F;data&#x2F;example.com&#x2F;privkey.key;</span><br><span class="line">	ssl_ciphers                 TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers    on;</span><br><span class="line">    ssl_protocols                TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class="line">    ssl_session_cache            shared:SSL:50m;</span><br><span class="line">    ssl_session_timeout          1d;</span><br><span class="line">    ssl_session_tickets          on;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h4 id="四、配置nginx服务"><a href="#四、配置nginx服务" class="headerlink" title="四、配置nginx服务"></a>四、配置nginx服务</h4><h5 id="1-创建服务文件"><a href="#1-创建服务文件" class="headerlink" title="1.创建服务文件"></a>1.创建服务文件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;nginx.service &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;The NGINX HTTP and reverse proxy server</span><br><span class="line">After&#x3D;syslog.target network.target remote-fs.target nss-lookup.target</span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;forking</span><br><span class="line">PIDFile&#x3D;&#x2F;etc&#x2F;nginx&#x2F;logs&#x2F;nginx.pid</span><br><span class="line">ExecStartPre&#x3D;&#x2F;etc&#x2F;nginx&#x2F;sbin&#x2F;nginx -t</span><br><span class="line">ExecStart&#x3D;&#x2F;etc&#x2F;nginx&#x2F;sbin&#x2F;nginx -c &#x2F;etc&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br><span class="line">ExecReload&#x3D;&#x2F;etc&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload</span><br><span class="line">ExecStop&#x3D;&#x2F;bin&#x2F;kill -s QUIT \$MAINPID</span><br><span class="line">PrivateTmp&#x3D;true</span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h5 id="2-加载并启动nginx"><a href="#2-加载并启动nginx" class="headerlink" title="2.加载并启动nginx"></a>2.加载并启动nginx</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure>
<h5 id="3-其他命令"><a href="#3-其他命令" class="headerlink" title="3.其他命令"></a>3.其他命令</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start nginx  -启动</span><br><span class="line">systemctl stop nginx  -停止</span><br></pre></td></tr></table></figure>

<h3 id="安装trojan-go"><a href="#安装trojan-go" class="headerlink" title="安装trojan-go"></a>安装trojan-go</h3><h4 id="一、下载trojan-go"><a href="#一、下载trojan-go" class="headerlink" title="一、下载trojan-go"></a>一、下载trojan-go</h4><h5 id="1-先切换到root-1"><a href="#1-先切换到root-1" class="headerlink" title="1.先切换到root"></a>1.先切换到root</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure>
<h5 id="2-新建一个目录，作为trojan的安装目录："><a href="#2-新建一个目录，作为trojan的安装目录：" class="headerlink" title="2.新建一个目录，作为trojan的安装目录："></a>2.新建一个目录，作为trojan的安装目录：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;etc&#x2F;trojan</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;etc&#x2F;trojan&#x2F;bin</span><br></pre></td></tr></table></figure>
<h5 id="3-下载trojan-go最新版本"><a href="#3-下载trojan-go最新版本" class="headerlink" title="3.下载trojan-go最新版本"></a>3.下载trojan-go最新版本</h5><p>浏览器打开trojan-go的release页面：<a href="https://github.com/p4gefau1t/trojan-go/releases" target="_blank" rel="noopener">https://github.com/p4gefau1t/trojan-go/releases</a>，找到最新版本的release，目前是：v0.8.1。</p>
<p>这里有很多不同系统的release，找到自己的系统对应的版本。不知道自己的，可以执行下面这句查看系统版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname -m</span><br></pre></td></tr></table></figure>
<p>经过查询我的vps是x86_64，对应的版本是：trojan-go-windows-amd64.zip，执行下面语句下载：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -O &#x2F;etc&#x2F;trojan&#x2F;bin&#x2F;trojan-go-linux-amd64.zip &quot;https:&#x2F;&#x2F;github.com&#x2F;p4gefau1t&#x2F;trojan-go&#x2F;releases&#x2F;download&#x2F;v0.4.10&#x2F;trojan-go-linux-amd64.zip&quot;</span><br></pre></td></tr></table></figure>
<p>如果执行上面那句报wget command not found ，debian和ubuntu请执行(没有报错就无需执行)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt -y install wget</span><br></pre></td></tr></table></figure>
<p>centos请执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install wget</span><br></pre></td></tr></table></figure>
<h4 id="二、解压-安装trojan-go"><a href="#二、解压-安装trojan-go" class="headerlink" title="二、解压/安装trojan-go"></a>二、解压/安装trojan-go</h4><p>下载后解压：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unzip -o -d &#x2F;etc&#x2F;trojan&#x2F;bin &#x2F;etc&#x2F;trojan&#x2F;bin&#x2F;trojan-go-linux-amd64.zip</span><br></pre></td></tr></table></figure>
<p>如果执行上面那句报unzip command not found ，debian和ubuntu请执行(没有报错就无需执行)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt -y install unzip</span><br></pre></td></tr></table></figure>
<p>centos请执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install unizip</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong><br>如果您的是i386 或i686，请下载：trojan-go-linux-386.zip</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -O &#x2F;etc&#x2F;trojan&#x2F;bin&#x2F;trojan-go-linux-amd64.zip &quot;https:&#x2F;&#x2F;github.com&#x2F;p4gefau1t&#x2F;trojan-go&#x2F;releases&#x2F;download&#x2F;v0.4.10&#x2F;trojan-go-linux-386.zip&quot;</span><br></pre></td></tr></table></figure>
<p>解压执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unzip -o -d &#x2F;etc&#x2F;trojan&#x2F;bin &#x2F;etc&#x2F;trojan&#x2F;bin&#x2F;trojan-go-linux-386.zip</span><br></pre></td></tr></table></figure>
<p>如果是armv7l，请下载：trojan-go-linux-armv7.zip</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -O &#x2F;etc&#x2F;trojan&#x2F;bin&#x2F;trojan-go-linux-amd64.zip &quot;https:&#x2F;&#x2F;github.com&#x2F;p4gefau1t&#x2F;trojan-go&#x2F;releases&#x2F;download&#x2F;v0.4.10&#x2F;trojan-go-linux-armv7.zip&quot;</span><br></pre></td></tr></table></figure>
<p>解压执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unzip -o -d &#x2F;etc&#x2F;trojan&#x2F;bin &#x2F;etc&#x2F;trojan&#x2F;bin&#x2F;trojan-go-linux-armv7.zip</span><br></pre></td></tr></table></figure>
<p><strong>这样trojan-go就安装完成了</strong></p>
<h3 id="配置trojan-go"><a href="#配置trojan-go" class="headerlink" title="配置trojan-go"></a>配置trojan-go</h3><p><strong>trojan-go安装完成后，开始配置</strong></p>
<h4 id="一、服务端配置"><a href="#一、服务端配置" class="headerlink" title="一、服务端配置"></a>一、服务端配置</h4><h5 id="1-先创建一个存放配置文件的目录："><a href="#1-先创建一个存放配置文件的目录：" class="headerlink" title="1.先创建一个存放配置文件的目录："></a>1.先创建一个存放配置文件的目录：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;etc&#x2F;trojan&#x2F;conf</span><br></pre></td></tr></table></figure>
<h5 id="2-创建服务端的配置文件："><a href="#2-创建服务端的配置文件：" class="headerlink" title="2.创建服务端的配置文件："></a>2.创建服务端的配置文件：</h5><p>修改以下6处，改好后执行下面所有的代码：<br><strong>注意，请修改以下6处后再执行：<br>1.将第5行local_port修改一个1-65535之间的端口，<br>2.第7行的端口号必须与nginx设置的端口一致<br>3.将第11行改为你的密码，<br>4.将第18、19、25、68、69行中的example.com改成自己的域名</strong></p>
<details>  
<summary>点击显示所有代码</summary>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt;&#x2F;etc&#x2F;trojan&#x2F;conf&#x2F;server.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  &quot;run_type&quot;: &quot;server&quot;,</span><br><span class="line">  &quot;local_addr&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">  &quot;local_port&quot;: 1-65535之间的一个端口号，如13997,</span><br><span class="line">  &quot;remote_addr&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">  &quot;remote_port&quot;: 与nginx端口保持一致,</span><br><span class="line">  &quot;log_level&quot;: 1,</span><br><span class="line">  &quot;log_file&quot;: &quot;&quot;,</span><br><span class="line">  &quot;password&quot;: [</span><br><span class="line">       &quot;你的密码&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;buffer_size&quot;: 32,</span><br><span class="line">  &quot;dns&quot;: [],</span><br><span class="line">  &quot;ssl&quot;: &#123;</span><br><span class="line">    &quot;verify&quot;: true,</span><br><span class="line">    &quot;verify_hostname&quot;: true,</span><br><span class="line">    &quot;cert&quot;: &quot;&#x2F;data&#x2F;example.com&#x2F;fullchain.crt&quot;,</span><br><span class="line">    &quot;key&quot;: &quot;&#x2F;data&#x2F;example.com&#x2F;privkey.key&quot;,</span><br><span class="line">    &quot;key_password&quot;: &quot;&quot;,</span><br><span class="line">    &quot;cipher&quot;: &quot;&quot;,</span><br><span class="line">    &quot;cipher_tls13&quot;: &quot;&quot;,</span><br><span class="line">    &quot;curves&quot;: &quot;&quot;,</span><br><span class="line">    &quot;prefer_server_cipher&quot;: false,</span><br><span class="line">    &quot;sni&quot;: &quot;example.com&quot;,</span><br><span class="line">    &quot;alpn&quot;: [</span><br><span class="line">      &quot;http&#x2F;1.1&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;session_ticket&quot;: true,</span><br><span class="line">    &quot;reuse_session&quot;: true,</span><br><span class="line">    &quot;plain_http_response&quot;: &quot;&quot;,</span><br><span class="line">    &quot;fallback_port&quot;: 1234,</span><br><span class="line">    &quot;fingerprint&quot;: &quot;firefox&quot;,</span><br><span class="line">    &quot;serve_plain_text&quot;: false</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tcp&quot;: &#123;</span><br><span class="line">    &quot;no_delay&quot;: true,</span><br><span class="line">    &quot;keep_alive&quot;: true,</span><br><span class="line">    &quot;reuse_port&quot;: false,</span><br><span class="line">    &quot;prefer_ipv4&quot;: false,</span><br><span class="line">    &quot;fast_open&quot;: false,</span><br><span class="line">    &quot;fast_open_qlen&quot;: 20</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mux&quot;: &#123;</span><br><span class="line">    &quot;enabled&quot;: false,</span><br><span class="line">    &quot;concurrency&quot;: 8,</span><br><span class="line">    &quot;idle_timeout&quot;: 60</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;router&quot;: &#123;</span><br><span class="line">    &quot;enabled&quot;: false,</span><br><span class="line">    &quot;bypass&quot;: [],</span><br><span class="line">    &quot;proxy&quot;: [],</span><br><span class="line">    &quot;block&quot;: [],</span><br><span class="line">    &quot;default_policy&quot;: &quot;proxy&quot;,</span><br><span class="line">    &quot;domain_strategy&quot;: &quot;as_is&quot;,</span><br><span class="line">    &quot;geoip&quot;: &quot;.&#x2F;geoip.dat&quot;,</span><br><span class="line">    &quot;geosite&quot;: &quot;.&#x2F;geoip.dat&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;websocket&quot;: &#123;</span><br><span class="line">    &quot;enabled&quot;: false,</span><br><span class="line">    &quot;path&quot;: &quot;&quot;,</span><br><span class="line">    &quot;hostname&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;obfuscation_password&quot;: &quot;&quot;,</span><br><span class="line">    &quot;double_tls&quot;: false,</span><br><span class="line">    &quot;ssl&quot;: &#123;</span><br><span class="line">      &quot;verify&quot;: true,</span><br><span class="line">      &quot;verify_hostname&quot;: true,</span><br><span class="line">      &quot;cert&quot;: &quot;&#x2F;data&#x2F;example.com&#x2F;fullchain.crt&quot;,</span><br><span class="line">      &quot;key&quot;: &quot;&#x2F;data&#x2F;example.com&#x2F;privkey.key&quot;,</span><br><span class="line">      &quot;key_password&quot;: &quot;&quot;,</span><br><span class="line">      &quot;prefer_server_cipher&quot;: false,</span><br><span class="line">      &quot;sni&quot;: &quot;&quot;,</span><br><span class="line">      &quot;session_ticket&quot;: true,</span><br><span class="line">      &quot;reuse_session&quot;: true,</span><br><span class="line">      &quot;plain_http_response&quot;: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;forward_proxy&quot;: &#123;</span><br><span class="line">    &quot;enabled&quot;: false,</span><br><span class="line">    &quot;proxy_addr&quot;: &quot;&quot;,</span><br><span class="line">    &quot;proxy_port&quot;: 0,</span><br><span class="line">    &quot;username&quot;: &quot;&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mysql&quot;: &#123;</span><br><span class="line">    &quot;enabled&quot;: false,</span><br><span class="line">    &quot;server_addr&quot;: &quot;localhost&quot;,</span><br><span class="line">    &quot;server_port&quot;: 3306,</span><br><span class="line">    &quot;database&quot;: &quot;&quot;,</span><br><span class="line">    &quot;username&quot;: &quot;&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;&quot;,</span><br><span class="line">    &quot;check_rate&quot;: 60</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;redis&quot;: &#123;</span><br><span class="line">    &quot;enabled&quot;: false,</span><br><span class="line">    &quot;server_addr&quot;: &quot;localhost&quot;,</span><br><span class="line">    &quot;server_port&quot;: 6379,</span><br><span class="line">    &quot;password&quot;: &quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;api&quot;: &#123;</span><br><span class="line">    &quot;enabled&quot;: false,</span><br><span class="line">    &quot;api_addr&quot;: &quot;&quot;,</span><br><span class="line">    &quot;api_port&quot;: 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
</details>

<h4 id="二、启动trojan-go服务"><a href="#二、启动trojan-go服务" class="headerlink" title="二、启动trojan-go服务"></a>二、启动trojan-go服务</h4><h5 id="1-创建trojan-go服务文件"><a href="#1-创建trojan-go服务文件" class="headerlink" title="1.创建trojan-go服务文件"></a>1.创建trojan-go服务文件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;trojan.service&lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;trojan</span><br><span class="line">Documentation&#x3D;https:&#x2F;&#x2F;github.com&#x2F;p4gefau1t&#x2F;trojan-go</span><br><span class="line">After&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">StandardError&#x3D;journal</span><br><span class="line">PIDFile&#x3D;&#x2F;usr&#x2F;src&#x2F;trojan&#x2F;trojan&#x2F;trojan.pid</span><br><span class="line">ExecStart&#x3D;&#x2F;etc&#x2F;trojan&#x2F;bin&#x2F;trojan-go -config &#x2F;etc&#x2F;trojan&#x2F;conf&#x2F;server.json</span><br><span class="line">ExecReload&#x3D;</span><br><span class="line">ExecStop&#x3D;&#x2F;etc&#x2F;trojan&#x2F;bin&#x2F;trojan-go</span><br><span class="line">LimitNOFILE&#x3D;51200</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line">RestartSec&#x3D;1s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h5 id="2-加载服务文件："><a href="#2-加载服务文件：" class="headerlink" title="2.加载服务文件："></a>2.加载服务文件：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<h5 id="3-启动服务"><a href="#3-启动服务" class="headerlink" title="3.启动服务"></a>3.启动服务</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start trojan.service</span><br></pre></td></tr></table></figure>
<h5 id="4-其他的一些命令："><a href="#4-其他的一些命令：" class="headerlink" title="4.其他的一些命令："></a>4.其他的一些命令：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl stop trojan.service   ------停止trojan-go</span><br><span class="line">systemctl restart trojan.service  --------重启trojan-go</span><br></pre></td></tr></table></figure>

<p>服务端和客户端配置文件都改好后，就可以进行科学上网了。但是，这个配置文件对于Trojan-go的新特效，一个都没有配置。</p>
<h4 id="三、新特性的配置"><a href="#三、新特性的配置" class="headerlink" title="三、新特性的配置"></a>三、新特性的配置</h4><p>下面我们一个个来看看如何设置这些新特性：</p>
<h5 id="1-配置CDN流量中转"><a href="#1-配置CDN流量中转" class="headerlink" title="1.配置CDN流量中转"></a>1.配置CDN流量中转</h5><p><strong>服务器配置文件修改以下3点：</strong><br>1.第2行改为true<br>2.第3行改为一个url，必须以斜杠(“/“)开始，如：/my，客户端和服务端必须一致<br>3.第4行是域名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;websocket&quot;: &#123;</span><br><span class="line">    &quot;enabled&quot;: true,</span><br><span class="line">    &quot;path&quot;: &quot;&#x2F;your-websocket-path&quot;,</span><br><span class="line">    &quot;host&quot;: &quot;example.com&quot;,</span><br></pre></td></tr></table></figure>

<ul>
<li><p>host是主机名，一般填写域名。客户端host是可选的，填写你的域名。如果留空，将会使用remote_addr填充。</p>
</li>
<li><p>path指的是websocket所在的URL路径，必须以斜杠(“/“)开始。路径并无特别要求，满足URL基本格式即可，但要保证客户端和服务端的path一致。path应当选择较长的字符串，以避免遭到GFW直接的主动探测。客户端的host将包含在Websocket的握手HTTP请求中，发送给CDN服务器，必须有效；服务端和客户端path必须一致，否则Websocket握手无法进行。</p>
</li>
</ul>
<h5 id="2-使用多路复用提升并发性能"><a href="#2-使用多路复用提升并发性能" class="headerlink" title="2.使用多路复用提升并发性能"></a>2.使用多路复用提升并发性能</h5><p><strong>服务端和客户端都只需要将false改为true即可</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;mux&quot;: &#123;</span><br><span class="line">    &quot;enabled&quot;: true,</span><br><span class="line">    &quot;concurrency&quot;: 8,</span><br><span class="line">    &quot;idle_timeout&quot;: 60</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>


<h3 id="各平台客户端下载"><a href="#各平台客户端下载" class="headerlink" title="各平台客户端下载"></a>各平台客户端下载</h3><p><strong>Windows/MacOS/Linux客户端Trojan-Qt5下载：</strong><br><a href="https://github.com/Trojan-Qt5/Trojan-Qt5/releases" target="_blank" rel="noopener">https://github.com/Trojan-Qt5/Trojan-Qt5/releases</a><br><strong>安卓客户端Igniter-Go下载：</strong></p>
<p><a href="https://play.google.com/store/apps/details?id=io.github.trojan_gfw.igniter&utm_source=github_readme&pcampaignid=pcampaignidMKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1&showAllReviews=true" target="_blank" rel="noopener">https://play.google.com/store/apps/details?id=io.github.trojan_gfw.igniter&amp;utm_source=github_readme&amp;pcampaignid=pcampaignidMKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1&amp;showAllReviews=true</a></p>
<p><strong>ios客户端到AppStore下载shadowrocket</strong></p>
<p><em>请注意哈，以上的Trojan-Qt5、Igniter-Go支持trojan-go的新特性，但shadowrocket不支持新特性。<br>如果你经常使用的是shadowrocket就不要启用新特性了。</em></p>
<h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E6%8D%90%E5%8A%A92.png?raw=true" alt=""></p>
]]></content>
  </entry>
  <entry>
    <title>Jeannie出品-手动生成tls证书</title>
    <url>/2020/06/02/Jeannie%E5%87%BA%E5%93%81-%E6%89%8B%E5%8A%A8%E7%94%9F%E6%88%90tls%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>如果在使用六合一脚本，或者trojan-go二合一脚本的时候出现下图所示情况，请按下面的步骤手动生成tls证书</strong></p>
<p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E8%AF%81%E4%B9%A6%E7%AD%BE%E5%8F%91%E5%A4%B1%E8%B4%A5.jpg?raw=true" alt="失败"></p>
<h3 id="安装acme-sh"><a href="#安装acme-sh" class="headerlink" title="安装acme.sh"></a>安装acme.sh</h3><h4 id="什么是acme-sh"><a href="#什么是acme-sh" class="headerlink" title="什么是acme.sh"></a>什么是acme.sh</h4><p><strong>简单来说acme.sh 实现了 acme 协议, 可以从 let‘s encrypt 生成免费的证书。</strong><br>acme.sh 有以下特点：</p>
<p>1.一个纯粹用Shell（Unix shell）语言编写的ACME协议客户端。<br>2.完整的ACME协议实施。<br>3.支持ACME v1和ACME v2 支持ACME v2通配符证书<br>4.简单，功能强大且易于使用。你只需要3分钟就可以学习它。<br>5.Let’s Encrypt免费证书客户端最简单的shell脚本。<br>6.纯粹用Shell编写，不依赖于python或官方的Let’s Encrypt客户端。<br>7.只需一个脚本即可自动颁发，续订和安装证书。不需要root/sudoer访问权限。<br>8.支持在Docker内使用，支持IPv6</p>
<h4 id="安装acme-sh-1"><a href="#安装acme-sh-1" class="headerlink" title="安装acme.sh"></a>安装acme.sh</h4><p>执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl  https:&#x2F;&#x2F;get.acme.sh | sh</span><br></pre></td></tr></table></figure>

<p><strong>安装过程中会自动为你创建 cronjob, 每天 0:00 点自动检测所有的证书, 如果快过期了, 需要更新, 则会自动更新证书。</strong></p>
<h3 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h3><p>acme.sh 实现了 acme 协议支持的所有验证协议. 一般有两种方式验证: http 和 dns 验证。<br>下面主要介绍DNS api方式，如果对http方式感兴趣可以参考官方说明：<br><a href="https://github.com/acmesh-official/acme.sh" target="_blank" rel="noopener">https://github.com/acmesh-official/acme.sh</a></p>
<h4 id="DNS-api方式"><a href="#DNS-api方式" class="headerlink" title="DNS api方式"></a>DNS api方式</h4><p>参考官方说明：</p>
<p><a href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi" target="_blank" rel="noopener">https://github.com/acmesh-official/acme.sh/wiki/dnsapi</a></p>
<p>由于acme.sh对域名解析/提供商的支持十分广泛,所以请针对自己所在的域名提供商获取对应的API Token，<a href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi" target="_blank" rel="noopener">支持列表</a></p>
<p><strong>本文以cloudflare为例,CloudFlare Domain API提供了两种自动颁发证书的方法。我们选用第一种：</strong><br><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/cloudflaare%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6.png?raw=true" alt=""><br><strong>首先<a href="https://dash.cloudflare.com/login" target="_blank" rel="noopener">登录cloudflare</a>,进入overview,拉到页面最底部,点击“Get your Api token”</strong><br><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/api%E6%88%AA%E5%9B%BE.png?raw=true" alt=""></p>
<p><strong>然后点击Global API Key对应的view，获取“获取API密钥”</strong></p>
<p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/cloudflaare%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6.png?raw=true" alt=""><br><strong>最后在vps上执行以下命令，注意API密钥和邮箱换成自己的</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export CF_Key&#x3D;&quot;sdfsdfsdfljlbjkljlkjsdfoiwje&quot;</span><br><span class="line">export CF_Email&#x3D;&quot;xxxx@sss.com&quot;</span><br></pre></td></tr></table></figure>
<p><strong>颁发证书执行以下命令，注意域名换成自己的</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh --issue --dns dns_cf -d www.example.com</span><br></pre></td></tr></table></figure>
<p><strong>修改目录名称执行，注意域名换成自己的</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv &#x2F;root&#x2F;.acme.sh&#x2F;www.example.com &#x2F;root&#x2F;.acme.sh&#x2F;www.example.com_ecc</span><br></pre></td></tr></table></figure>
<p><strong>安装证书执行以下命令，域名换成自己的</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;root&#x2F;.acme.sh&#x2F;acme.sh --installcert -d www.example.com --fullchainpath &#x2F;data&#x2F;www.example.com&#x2F;fullchain.crt --keypath &#x2F;data&#x2F;www.example.com&#x2F;privkey.key --ecc --force</span><br></pre></td></tr></table></figure>
<p><strong>之后安装6合1或者trojan go二合一就可以顺利完成了，enjoy!!</strong></p>
<p><strong>视频链接：<a href="https://youtu.be/2Xys_rd4edQ" target="_blank" rel="noopener">https://youtu.be/2Xys_rd4edQ</a></strong><br><strong>订阅本频道：<a href="https://bit.ly/2X042ea" target="_blank" rel="noopener">https://bit.ly/2X042ea</a></strong></p>
]]></content>
  </entry>
  <entry>
    <title>Jeannie出品-针对v2ray core的重大安全漏洞，进行6合1脚本的更新</title>
    <url>/2020/06/01/Jeannie%E5%87%BA%E5%93%81-%E9%92%88%E5%AF%B9v2ray%20core%E7%9A%84%E9%87%8D%E5%A4%A7%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%EF%BC%8C%E8%BF%9B%E8%A1%8C6%E5%90%881%E8%84%9A%E6%9C%AC%E7%9A%84%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>针对v2ray在v4.23.2 前固定 TLS 密码套件潜在的特征识别风险，对6合1脚本做相应更新</strong></p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/cNSq5RdVf28" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<h3 id="情况1"><a href="#情况1" class="headerlink" title="情况1"></a>情况1</h3><p><strong>如果已经安装了6合一脚本中的3或者4，请执行下面两句进行v2ray-core的更新：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -L -s https:&#x2F;&#x2F;install.direct&#x2F;go.sh)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service v2ray restart</span><br></pre></td></tr></table></figure>

<h3 id="情况2"><a href="#情况2" class="headerlink" title="情况2"></a>情况2</h3><p><strong>如果在这个视频发布之后安装的即是最新版本，无需更新：</strong></p>
<h3 id="本次对6合1脚本的更新"><a href="#本次对6合1脚本的更新" class="headerlink" title="本次对6合1脚本的更新"></a>本次对6合1脚本的更新</h3><p><strong>管理脚本：/etc/all_mgr.sh中添加数字8：更新v2ray core，以后可以随时更新v2ray core</strong></p>
<p><strong>视频链接：<a href="https://youtu.be/cNSq5RdVf28" target="_blank" rel="noopener">https://youtu.be/cNSq5RdVf28</a></strong><br><strong>订阅本频道：<a href="https://bit.ly/2X042ea" target="_blank" rel="noopener">https://bit.ly/2X042ea</a></strong></p>
]]></content>
  </entry>
  <entry>
    <title>Jeannie出品-目前抵抗GFW最佳利器Trojan-go + Tls 二合一一键脚本</title>
    <url>/2020/05/21/Jeannie%E5%87%BA%E5%93%81-Trojan-go2%E5%90%881%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>今天给大家分享目前抵抗GFW最佳利器Trojan-go + Tls 二合一一键脚本供大家参考</strong></p>
<h3 id="支持平台："><a href="#支持平台：" class="headerlink" title="支持平台："></a>支持平台：</h3><p>*<em>Debian  9、10<br>Ubuntu 16.04  、18.04、19.10<br>Centos  7、8<br>*</em></p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p><strong>1.一个域名，推荐namesio(便宜，续费费用不会增加)<br>2.购买vps，以谷歌云为例</strong></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>切换到root用户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure>
<p>centos先执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install curl</span><br></pre></td></tr></table></figure>
<p>debian、ubuntu先执行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt -y install curl</span><br></pre></td></tr></table></figure>
<p>执行一键搭建脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;JeannieStudio&#x2F;all_install&#x2F;master&#x2F;trojan-go_install.sh)&quot;</span><br></pre></td></tr></table></figure>
<p>安装bbr（只是锦上添花，不安装也可以出国）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;chiakge&#x2F;Linux-NetSpeed&#x2F;master&#x2F;tcp.sh&quot;</span><br><span class="line">chmod +x tcp.sh</span><br><span class="line">.&#x2F;tcp.sh</span><br></pre></td></tr></table></figure>



<p><strong>视频链接：<a href="https://youtu.be/uhke9t1syns" target="_blank" rel="noopener">https://youtu.be/uhke9t1syns</a></strong><br><strong>订阅本频道：<a href="https://bit.ly/2X042ea" target="_blank" rel="noopener">https://bit.ly/2X042ea</a></strong></p>
]]></content>
  </entry>
  <entry>
    <title>Jeannie出品-六合一脚本</title>
    <url>/2020/05/13/Jeannie%E5%87%BA%E5%93%81-%E5%85%AD%E5%90%88%E4%B8%80%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>今天给大家分享六合一一键脚本供大家参考</strong></p>
<h3 id="支持平台："><a href="#支持平台：" class="headerlink" title="支持平台："></a>支持平台：</h3><p>*<em>Debian  9、10<br>Ubuntu 16.04  、18.04、19.10<br>Centos  7、8<br>*</em></p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p><strong>1.一个域名，推荐namesio(便宜，续费费用不会增加)<br>2.购买vps，以谷歌云为例</strong></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>切换到root用户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure>

<p>执行一键搭建脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;JeannieStudio&#x2F;all_install&#x2F;master&#x2F;SixForOne_install.sh)&quot;</span><br></pre></td></tr></table></figure>
<p>安装bbr（只是锦上添花，不安装也可以出国）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;chiakge&#x2F;Linux-NetSpeed&#x2F;master&#x2F;tcp.sh&quot;</span><br><span class="line">chmod +x tcp.sh</span><br><span class="line">.&#x2F;tcp.sh</span><br></pre></td></tr></table></figure>



<p><strong>视频链接：<a href="https://youtu.be/2Xys_rd4edQ" target="_blank" rel="noopener">https://youtu.be/2Xys_rd4edQ</a></strong><br><strong>订阅本频道：<a href="https://bit.ly/2X042ea" target="_blank" rel="noopener">https://bit.ly/2X042ea</a></strong></p>
]]></content>
  </entry>
  <entry>
    <title>六合一脚本的bug修复</title>
    <url>/2020/04/22/Jeannie%E5%87%BA%E5%93%81-%E5%85%AD%E5%90%88%E4%B8%80%E8%84%9A%E6%9C%AC%E7%9A%84bug%E4%BF%AE%E5%A4%8D/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>网友反馈一个重大bug，执行定时任务后由于获取不到证书的到期日，造成死循环，故造成cpu利用率持续100%</p>
<h3 id="修复执行如下代码"><a href="#修复执行如下代码" class="headerlink" title="修复执行如下代码"></a>修复执行如下代码</h3><p>切换到root用户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure>

<p>执行一键搭建脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;JeannieStudio&#x2F;jeannie&#x2F;master&#x2F;bug.sh)&quot;</span><br></pre></td></tr></table></figure>

<p><strong>视频链接：</strong><br><strong>订阅本频道：<a href="https://bit.ly/2X042ea" target="_blank" rel="noopener">https://bit.ly/2X042ea</a></strong></p>
]]></content>
  </entry>
  <entry>
    <title>Jeannie出品-v2ray+tls+caddy+伪装网站一键脚本</title>
    <url>/2020/04/13/Jeannie%E5%87%BA%E5%93%81-v2ray+tls+caddy+%E4%BC%AA%E8%A3%85%E7%BD%91%E7%AB%99%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>不想手工搭建v2ray+ws+tls+caddy+伪装网站的小伙伴们，现整理了一个一键脚本供大家参考</strong></p>
<h3 id="支持平台："><a href="#支持平台：" class="headerlink" title="支持平台："></a>支持平台：</h3><p>*<em>Debian  9、10<br>Ubuntu 16.04  、18.04、19.10<br>Centos  7<br>*</em></p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p><strong>1.一个域名，推荐namesio(便宜，续费费用不会增加)<br>2.购买vps，以谷歌云为例</strong></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>切换到root用户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure>

<p>执行一键搭建脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;JeannieStudio&#x2F;jeannie&#x2F;master&#x2F;v2ray-caddy-tls-ws.sh)&quot;</span><br></pre></td></tr></table></figure>
<p>安装bbr（只是锦上添花，不安装也可以出国）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;chiakge&#x2F;Linux-NetSpeed&#x2F;master&#x2F;tcp.sh&quot;</span><br><span class="line">chmod +x tcp.sh</span><br><span class="line">.&#x2F;tcp.sh</span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>别忘了创建防火墙规则，放行80、443这四个端口的出入站，不然，额……你不让人家过，人家怎么帮你转发流量，自然也上不了网喽！</p>
<p><strong>视频链接：<a href="https://youtu.be/WPUkdPKA2jU" target="_blank" rel="noopener">https://youtu.be/WPUkdPKA2jU</a></strong><br><strong>订阅本频道：<a href="https://bit.ly/2X042ea" target="_blank" rel="noopener">https://bit.ly/2X042ea</a></strong></p>
]]></content>
  </entry>
  <entry>
    <title>Jeannie出品-trojan+tls+nginx+伪装网站一键脚本</title>
    <url>/2020/04/11/Jeannie%E5%87%BA%E5%93%81-trojan+tls+nginx+%E4%BC%AA%E8%A3%85%E7%BD%91%E7%AB%99%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>不想手工搭建trojan+tls+nginx+伪装网站的小伙伴们，现整理了一个一键脚本供大家参考</strong></p>
<h3 id="支持平台："><a href="#支持平台：" class="headerlink" title="支持平台："></a>支持平台：</h3><p><strong>Debian  9、10<br>Ubuntu 16.04 18.04、19.10<br>Centos  7</strong></p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p><strong>1.一个域名，推荐namesio(便宜，续费费用不会增加)<br>2.购买vps，以谷歌云为例</strong></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>切换到root用户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure>

<p>执行一键搭建脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;JeannieStudio&#x2F;jeannie&#x2F;master&#x2F;trojan-tls-nginx.sh)&quot;</span><br></pre></td></tr></table></figure>
<p>安装bbr（只是锦上添花，不安装也可以出国）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;chiakge&#x2F;Linux-NetSpeed&#x2F;master&#x2F;tcp.sh&quot;</span><br><span class="line">chmod +x tcp.sh</span><br><span class="line">.&#x2F;tcp.sh</span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>别忘了创建防火墙规则，放行80、443这四个端口的出入站，不然，额……你不让人家过，人家怎么帮你转发流量，自然也上不了网喽！</p>
<p><strong>视频链接：<a href="https://youtu.be/rruerjgQ8fY" target="_blank" rel="noopener">https://youtu.be/rruerjgQ8fY</a></strong><br><strong>订阅本频道：<a href="https://bit.ly/2X042ea" target="_blank" rel="noopener">https://bit.ly/2X042ea</a></strong></p>
]]></content>
  </entry>
  <entry>
    <title>Jeannie出品-trojan+tls+caddy+伪装网站一键脚本</title>
    <url>/2020/04/11/Jeannie%E5%87%BA%E5%93%81-trojan+tls+caddy+%E4%BC%AA%E8%A3%85%E7%BD%91%E7%AB%99%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>不想手工搭建trojan+tls+caddy+伪装网站的小伙伴们，现整理了一个一键脚本供大家参考</strong></p>
<h3 id="支持平台："><a href="#支持平台：" class="headerlink" title="支持平台："></a>支持平台：</h3><p><strong>Debian  9、10<br>Ubuntu 16.04 18.04、19.10<br>Centos  7</strong></p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p><strong>1.一个域名，推荐namesio(便宜，续费费用不会增加)<br>2.购买vps，以谷歌云为例</strong></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>切换到root用户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure>

<p>执行一键搭建脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;JeannieStudio&#x2F;jeannie&#x2F;master&#x2F;trojan-tls-caddy.sh)&quot;</span><br></pre></td></tr></table></figure>
<p>安装bbr（只是锦上添花，不安装也可以出国）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;chiakge&#x2F;Linux-NetSpeed&#x2F;master&#x2F;tcp.sh&quot;</span><br><span class="line">chmod +x tcp.sh</span><br><span class="line">.&#x2F;tcp.sh</span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>别忘了创建防火墙规则，放行80、443这四个端口的出入站，不然，额……你不让人家过，人家怎么帮你转发流量，自然也上不了网喽！</p>
<p><strong>视频链接：<a href="https://youtu.be/WDqxhaPpKL0" target="_blank" rel="noopener">https://youtu.be/WDqxhaPpKL0</a></strong><br><strong>订阅本频道：<a href="https://bit.ly/2X042ea" target="_blank" rel="noopener">https://bit.ly/2X042ea</a></strong></p>
]]></content>
  </entry>
  <entry>
    <title>Jeannie出品-v2ray+tls+nginx+伪装网站一键脚本</title>
    <url>/2020/04/11/Jeannie%E5%87%BA%E5%93%81-v2ray+tls+nginx+%E4%BC%AA%E8%A3%85%E7%BD%91%E7%AB%99%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>不想手工搭建v2ray+ws+tls+Nginx+伪装网站的小伙伴们，现整理了一个一键脚本供大家参考</strong></p>
<h3 id="支持平台："><a href="#支持平台：" class="headerlink" title="支持平台："></a>支持平台：</h3><p>*<em>Debian  9、10<br>Ubuntu 16.04  、18.04、19.10<br>Centos  7、8<br>*</em></p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p><strong>1.一个域名，推荐namesio(便宜，续费费用不会增加)<br>2.购买vps，以谷歌云为例</strong></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>切换到root用户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure>

<p>执行一键搭建脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;JeannieStudio&#x2F;jeannie&#x2F;master&#x2F;v2ray-tls-nginx.sh)&quot;</span><br></pre></td></tr></table></figure>
<p>安装bbr（只是锦上添花，不安装也可以出国）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;chiakge&#x2F;Linux-NetSpeed&#x2F;master&#x2F;tcp.sh&quot;</span><br><span class="line">chmod +x tcp.sh</span><br><span class="line">.&#x2F;tcp.sh</span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>别忘了创建防火墙规则，放行80、443这四个端口的出入站，不然，额……你不让人家过，人家怎么帮你转发流量，自然也上不了网喽！</p>
<p><strong>视频链接：<a href="https://youtu.be/DSEPPiyY_GM" target="_blank" rel="noopener">https://youtu.be/DSEPPiyY_GM</a></strong><br><strong>订阅本频道：<a href="https://bit.ly/2X042ea" target="_blank" rel="noopener">https://bit.ly/2X042ea</a></strong></p>
]]></content>
  </entry>
  <entry>
    <title>GCP谷歌云防火墙规则相关问题</title>
    <url>/2020/04/02/GCP%E8%B0%B7%E6%AD%8C%E4%BA%91%E9%98%B2%E7%81%AB%E5%A2%99%E8%A7%84%E5%88%99%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><em>在GCP谷歌云vps上安装了ufw并配置后，没用、没用、没用，可悲的事情说三遍。我先哭一会儿……</em><br><strong>事由：</strong><br>作者写了个一键脚本，想在谷歌云上自动开启某个端口，比如放行12345端口的入站和出站流量。<br>于是开始安装ufw防火墙管理工具<br><strong>ubuntu和debian</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install ufw -y</span><br></pre></td></tr></table></figure>
<p><strong>centos</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install ufw -y</span><br></pre></td></tr></table></figure>
<p><strong>安装完成后先查看防火墙状态，默认关闭或者未启用状态</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ufw status verbose</span><br></pre></td></tr></table></figure>
<p>列出当前安装的程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ufw app list</span><br></pre></td></tr></table></figure>
<p>启用防火墙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ufw enable</span><br></pre></td></tr></table></figure>
<p>禁用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ufw disable</span><br></pre></td></tr></table></figure>
<p>其他开启相关进程防火墙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ufw allow ssh </span><br><span class="line">ufw allow http </span><br><span class="line">ufw allow https</span><br></pre></td></tr></table></figure>
<h3 id="谷歌云防火墙的创建"><a href="#谷歌云防火墙的创建" class="headerlink" title="谷歌云防火墙的创建"></a>谷歌云防火墙的创建</h3><p>谷歌云防火墙的创建，要么从控制台手动创建，要么使用gcp提供的命令，如：<br>创建一条名为my的规则启用tcp，开启端口：12273-12274</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcloud compute firewall-rules create my \ </span><br><span class="line">--allow tcp:12273-12274</span><br></pre></td></tr></table></figure>
<p>更多相关参考：<br><a href="https://cloud.google.com/sdk/gcloud/reference/compute/firewall-rules/create" target="_blank" rel="noopener">https://cloud.google.com/sdk/gcloud/reference/compute/firewall-rules/create</a><br>当可能会报以下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- Insufficient Permission: Request had insufficient </span><br><span class="line">authentication scopes.</span><br></pre></td></tr></table></figure>

<p>解决办法：<br>执行如下命令，并按提示进行确认并输入授权码，最终可以执行如上命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcloud auth login</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>可能是GCP处于安全考虑，总之，想用ufw操作防火墙在GCP这个平台没能实现，所以作者想写个一键脚本自动开启端口的夙愿未能实现，哎……如果有牛逼的大佬，有方法可以留言。</p>
]]></content>
  </entry>
  <entry>
    <title>国内外常用的域名注册商（持续更新中）</title>
    <url>/2020/03/19/%E5%9B%BD%E5%86%85%E5%A4%96%E5%B8%B8%E7%94%A8%E7%9A%84%E8%91%97%E5%90%8D%E6%B3%A8%E5%86%8C%E5%95%86%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E7%A7%8D%EF%BC%89/</url>
    <content><![CDATA[<h1 id="中国域名注册商（需要实名认证和备案）："><a href="#中国域名注册商（需要实名认证和备案）：" class="headerlink" title="中国域名注册商（需要实名认证和备案）："></a>中国域名注册商（需要实名认证和备案）：</h1><table>
<thead>
<tr>
<th>注册商</th>
<th>付款方式</th>
<th>首年费用</th>
<th>续费</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>腾讯云</td>
<td>微信</td>
<td>￥8+</td>
<td>+</td>
<td></td>
</tr>
<tr>
<td>阿里云</td>
<td>支付宝</td>
<td>￥8+</td>
<td>+</td>
<td></td>
</tr>
<tr>
<td>时代互联</td>
<td>微信、支付宝</td>
<td>￥5+</td>
<td>+</td>
<td></td>
</tr>
<tr>
<td>西部数码</td>
<td>支付宝</td>
<td>￥8 +</td>
<td>+</td>
<td></td>
</tr>
<tr>
<td>Q名网（qming.com）</td>
<td>微信、支付宝</td>
<td>￥26 +</td>
<td>+</td>
<td></td>
</tr>
<tr>
<td>中资源（zzy.cn）</td>
<td>微信、支付宝</td>
<td>￥8 +</td>
<td>+</td>
<td></td>
</tr>
<tr>
<td>华夏名网（<a href="http://www.sudu.cn）" target="_blank" rel="noopener">www.sudu.cn）</a></td>
<td>微信、支付宝</td>
<td>￥8 +</td>
<td>+</td>
<td></td>
</tr>
<tr>
<td>爱名网（22.cn/ym）</td>
<td>支付宝</td>
<td>￥9 +</td>
<td>+</td>
<td></td>
</tr>
<tr>
<td>百度云</td>
<td></td>
<td>￥9 +</td>
<td>+</td>
<td></td>
</tr>
<tr>
<td>快网（cnkuai.cn/domain/domainlist.htm）</td>
<td>支付宝</td>
<td>￥10 +</td>
<td>+</td>
<td></td>
</tr>
<tr>
<td>趣域（quyu.net）</td>
<td>支付宝、信用卡</td>
<td>￥35</td>
<td>0</td>
<td>无需实名认证和备案</td>
</tr>
</tbody></table>
<h1 id="国外域名注册商（无需实名认证和备案）"><a href="#国外域名注册商（无需实名认证和备案）" class="headerlink" title="国外域名注册商（无需实名认证和备案）"></a>国外域名注册商（无需实名认证和备案）</h1><table>
<thead>
<tr>
<th>注册商</th>
<th>付款方式</th>
<th>首年费用</th>
<th>续费</th>
</tr>
</thead>
<tbody><tr>
<td>GoDaddy</td>
<td>支付宝、信用卡</td>
<td>$1.82+</td>
<td>+</td>
</tr>
<tr>
<td>namecheap</td>
<td>paypal 、信用卡</td>
<td>$1.57+</td>
<td>+</td>
</tr>
<tr>
<td>Namesilo</td>
<td>支付宝、信用卡、paypal</td>
<td>$0.99+</td>
<td>0</td>
</tr>
<tr>
<td>whois.com</td>
<td>paypal、信用卡</td>
<td>$ 0.88+</td>
<td>+</td>
</tr>
<tr>
<td>Dynadot</td>
<td>支付宝、信用卡</td>
<td>$0.99+</td>
<td>+</td>
</tr>
<tr>
<td>Name</td>
<td>paypal、信用卡</td>
<td>$1.99+</td>
<td>+</td>
</tr>
<tr>
<td>Porkbun</td>
<td>paypal、信用卡</td>
<td>$1.99+</td>
<td>+</td>
</tr>
<tr>
<td>domaincostclub</td>
<td>paypal、信用卡</td>
<td>$0.99+</td>
<td>0</td>
</tr>
<tr>
<td>Gandi.net</td>
<td>支付宝、信用卡</td>
<td>$.99+</td>
<td>0</td>
</tr>
<tr>
<td>internet.bs</td>
<td>paypal 、信用卡</td>
<td>$1.00 +</td>
<td>+</td>
</tr>
<tr>
<td>Epik</td>
<td>paypal、信用卡</td>
<td>$1.25 +</td>
<td>+</td>
</tr>
<tr>
<td>OVH</td>
<td>paypal、信用卡</td>
<td>£0.84+</td>
<td>+</td>
</tr>
<tr>
<td>OnlyDomains</td>
<td>paypal、信用卡</td>
<td>$0.99+</td>
<td>0</td>
</tr>
<tr>
<td>Uniregistry</td>
<td>paypal、信用卡</td>
<td>$ 0.99+</td>
<td>0</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>caddy+http.forwardproxy +filebrowser+bbr-一键搭建</title>
    <url>/2020/03/14/caddy+http.forwardproxy%20+filebrowser+bbr-%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>大家是否知道caddy有一款插件叫做：http.forwardproxy，只要我们安装上这二者，然后稍加配置，就可以愉快的在世界网络中穿梭了，是不是很神奇?Let’s get started.</strong></p>
<h3 id="安装并配置"><a href="#安装并配置" class="headerlink" title="安装并配置"></a>安装并配置</h3><h4 id="安装caddy-http-forwardproxy"><a href="#安装caddy-http-forwardproxy" class="headerlink" title="安装caddy+http.forwardproxy"></a>安装caddy+http.forwardproxy</h4><p>下面直接给出了一键搭建脚本，想了解原理和手工搭建过程的可以参考这个：<a href="https://jeanniestudio.top/2020/03/14/caddy+http.forwardproxy%20+filebrowser--%E6%89%8B%E5%B7%A5%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/" target="_blank" rel="noopener">链接</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -O caddy-forwardproxy.sh https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;JeannieStudio&#x2F;jeannie&#x2F;master&#x2F;caddy-forwardproxy.sh</span><br><span class="line">chmod +x caddy-forwardproxy.sh</span><br><span class="line">.&#x2F;caddy-forwardproxy.sh 2&gt;&amp;1 | tee caddy-forwardproxy.log</span><br></pre></td></tr></table></figure>
<p>安装bbr四合一脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;chiakge&#x2F;Linux-NetSpeed&#x2F;master&#x2F;tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; .&#x2F;tcp.sh</span><br></pre></td></tr></table></figure>

<h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><p><strong>windows端：</strong><br>我用的chrome浏览器，下载Proxy SwitchyOmega插件，安装如下填写：</p>
<p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E9%85%8D%E7%BD%AE0000000.jpg?raw=true" alt="配置"><br>点击左下侧的“应用选项”就可以出国旅游了。</p>
<p><strong>ios端</strong><br>用小火箭即可，地址填域名，用户名和密码是Caddyfile里填的用户名和密码：<br><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/ios0001.jpg?raw=true" alt="ios"></p>
<hr>
<p><strong>至此，您可以再世界网络穿梭了。</strong></p>
<hr>
<h3 id="配置伪装网站"><a href="#配置伪装网站" class="headerlink" title="配置伪装网站"></a>配置伪装网站</h3><p><strong>选泽一：伪装成一个非常卡哇伊的好玩的网站，类似下面这样</strong></p>
<p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/002.gif?raw=true" alt="动图"></p>
<p>依次执行下面这2条命令即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install git -y</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;HFIProgramming&#x2F;mikutap.git &#x2F;var&#x2F;www</span><br></pre></td></tr></table></figure>

<p>如果您选择了这个后不满意，又想安装下面那个私有云盘需要先执行下面两条命令再去执行私有云盘的脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -rf &#x2F;var&#x2F;www</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;var&#x2F;www</span><br></pre></td></tr></table></figure>
<p><strong>选择二：安装filebrowser伪装成一个个人在线私有云盘</strong><br><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/03.gif?raw=true" alt=""><br>上期给小伙伴演示了配置一个静态网站进行伪装，有朋友说比较浪费，好吧，那么就配置一个个人私有网盘，当个U盘使用吧，放上去的东西千万要本地备份，不然ip被封了文件找不回来了，哭都找不着地方哦😂</p>
<p>下面直接给出一键脚本，想了解如何手工安装可以参考这里：<a href="https://jeanniestudio.top/2020/03/14/caddy+http.forwardproxy%20+filebrowser--%E6%89%8B%E5%B7%A5%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/" target="_blank" rel="noopener">链接</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -O filebrowser.sh https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;JeannieStudio&#x2F;jeannie&#x2F;master&#x2F;filebrowser.sh</span><br><span class="line">chmod +x filebrowser.sh</span><br><span class="line">.&#x2F;filebrowser.sh 2&gt;&amp;1 | tee filebrowser.log</span><br></pre></td></tr></table></figure>
<p>启动成功后在浏览器输入您的域名就可以看到上面那个个人网盘登录界面了。大功告成了！</p>
]]></content>
  </entry>
  <entry>
    <title>caddy+http.forwardproxy +filebrowser--手工搭建过程</title>
    <url>/2020/03/14/caddy+http.forwardproxy%20+filebrowser--%E6%89%8B%E5%B7%A5%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>大家是否知道caddy有一款插件叫做：http.forwardproxy，只要我们安装上这二者，然后稍加配置，就可以愉快的在世界网络中穿梭了，是不是很神奇?Let’s get started.</strong></p>
<h3 id="安装并配置"><a href="#安装并配置" class="headerlink" title="安装并配置"></a>安装并配置</h3><h4 id="安装caddy-http-forwardproxy"><a href="#安装caddy-http-forwardproxy" class="headerlink" title="安装caddy+http.forwardproxy"></a>安装caddy+http.forwardproxy</h4><p>官网上就有安装命令，链接：<a href="https://caddyserver.com/v1/download" target="_blank" rel="noopener">https://caddyserver.com/v1/download</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;getcaddy.com | bash -s personal http.forwardproxy</span><br></pre></td></tr></table></figure>

<p>首先在/etc目录下新建一个名为caddy的目录，用于存放caddy的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;etc&#x2F;caddy</span><br></pre></td></tr></table></figure>
<p>然后再新建一个用于存放网站的目录，<strong>注意替换您的域名</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;var&#x2F;www&#x2F;您的域名</span><br></pre></td></tr></table></figure>
<p>下面要创建一个名为Caddyfile的配置文件，直接执行如下命令，<strong>注意替换域名、邮箱，用户名和密码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;http:&#x2F;&#x2F;您的域名:80  &#123;</span><br><span class="line">      redir https:&#x2F;&#x2F;您的域名:443&#123;url&#125;</span><br><span class="line">&#125; </span><br><span class="line">https:&#x2F;&#x2F;您的域名:443  &#123;  </span><br><span class="line">        gzip  </span><br><span class="line">	timeouts none</span><br><span class="line">	tls 您的邮箱</span><br><span class="line">   root &#x2F;var&#x2F;www&#x2F;您的域名</span><br><span class="line">   forwardproxy &#123;</span><br><span class="line">       basicauth 你的用户名 你的密码</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;&quot; &gt; &#x2F;etc&#x2F;caddy&#x2F;Caddyfile</span><br></pre></td></tr></table></figure>
<p>这时候直接运行下面命令就可以启动caddy服务了，中间会询问你是否下载tls证书，选择y，就自动配置好tls证书了，是不是很贴心？？ </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">caddy -conf &#x2F;etc&#x2F;caddy&#x2F;Caddyfile</span><br></pre></td></tr></table></figure>
<p>然鹅，这样启动了caddy服务后，这个终端就不能再执行其他命令了（除非重新打开一个ssh终端），关闭和重启caddy服务都很麻烦，我们希望执行一条命令就可以后台重启服务了，再执行一条命令就关闭了，这就需要安装进程管理工具。</p>
<hr>
<h4 id="安装和配置Supervisor"><a href="#安装和配置Supervisor" class="headerlink" title="安装和配置Supervisor"></a>安装和配置Supervisor</h4><p>Supervisor 是基于 Python 的进程管理工具，可以帮助我们更简单的启动、重启和停止服务器上的后台进程，是 Linux 服务器管理的效率工具。</p>
<p>安装执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install supervisor</span><br></pre></td></tr></table></figure>
<p>下面将caddy配置成一个服务，执行命令：（这条命令不用改任何东西）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;[program:caddy]command &#x3D; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;caddy -log stdout -agree&#x3D;true -conf&#x3D;&#x2F;etc&#x2F;caddy&#x2F;Caddyfiledirectory &#x3D; &#x2F;etc&#x2F;caddyautorstart&#x3D;trueenvironment&#x3D;CADDYPATH&#x3D;&#x2F;etc&#x2F;ssl&#x2F;caddy&quot; &gt; &#x2F;etc&#x2F;supervisor&#x2F;conf.d&#x2F;caddy.conf</span><br></pre></td></tr></table></figure>


<p>supervisorctrl是supervisor的客户端工具，本身安装完会不加载任何配置启动，所以要先杀死</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">supervisorctl shutdown</span><br></pre></td></tr></table></figure>
<p>再加载配置重新启动，这时候应该已经启动了caddy了，为了保险再执行下后两条吧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">supervisord -c &#x2F;etc&#x2F;supervisor&#x2F;supervisord.conf</span><br></pre></td></tr></table></figure>
<p>关闭caddy服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">supervisorctl stop caddy</span><br></pre></td></tr></table></figure>
<p>启动caddy服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">supervisorctl restart caddy</span><br></pre></td></tr></table></figure>
<p>这样以后管理caddy就执行以下命令就可以了：</p>
<p>启动：supervisorctl start caddy<br>停止：supervisorctl stop caddy<br>重启：supervisorctl restart caddy<br>查看状态：supervisorctl status<br>安装目录为：/usr/local/bin/caddy<br>配置文件位置：/etc/caddy/Caddyfile</p>
<h4 id="安装bbr四合一脚本："><a href="#安装bbr四合一脚本：" class="headerlink" title="安装bbr四合一脚本："></a>安装bbr四合一脚本：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;chiakge&#x2F;Linux-NetSpeed&#x2F;master&#x2F;tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; .&#x2F;tcp.sh</span><br></pre></td></tr></table></figure>

<h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><p><strong>windows端：</strong><br>我用的chrome浏览器，下载Proxy SwitchyOmega插件，安装如下填写：</p>
<p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E9%85%8D%E7%BD%AE0000000.jpg?raw=true" alt="配置"><br>点击左下侧的“应用选项”就可以出国旅游了。</p>
<p><strong>ios端</strong><br>用小火箭即可，地址填域名，用户名和密码是Caddyfile里填的用户名和密码：<br><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/ios0001.jpg?raw=true" alt="ios"></p>
<hr>
<p>**至此，您可以再世界网络穿梭了。</p>
<hr>
<h3 id="配置伪装网站"><a href="#配置伪装网站" class="headerlink" title="配置伪装网站"></a>配置伪装网站</h3><p><strong>选泽一：伪装成一个非常卡哇伊的好玩的网站，类似下面这样</strong></p>
<p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/002.gif?raw=true" alt="动图"></p>
<p>依次执行下面这2条命令即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install git -y</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;HFIProgramming&#x2F;mikutap.git &#x2F;var&#x2F;www</span><br></pre></td></tr></table></figure>

<p>如果您选择了这个后不满意，又想安装下面那个私有云盘需要先执行下面两条命令再去执行私有云盘的脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -rf &#x2F;var&#x2F;www</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;var&#x2F;www</span><br></pre></td></tr></table></figure>
<p><strong>选择二：安装filebrowser伪装成一个个人在线私有云盘</strong><br><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/03.gif?raw=true" alt=""><br>上期给小伙伴演示了配置一个静态网站进行伪装，有朋友说比较浪费，好吧，那么就配置一个个人私有网盘，当个U盘使用吧，放上去的东西千万要本地备份，不然ip被封了文件找不回来了，哭都找不着地方哦😂</p>
<p>安装filebrowser</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -fsSL https:&#x2F;&#x2F;filebrowser.xyz&#x2F;get.sh | bash</span><br></pre></td></tr></table></figure>
<p>创建配置数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filebrowser -d &#x2F;etc&#x2F;filebrowser.db config init</span><br></pre></td></tr></table></figure>

<p>设置监听地址(0.0.0.0表示任意地址的主机都可以访问个人云盘，您也可以换成您自己的个人主机IP)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filebrowser -d &#x2F;etc&#x2F;filebrowser.db config set --address 0.0.0.0</span><br></pre></td></tr></table></figure>
<p>设置监听端口，端口号随意填写（1-65535）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filebrowser -d &#x2F;etc&#x2F;filebrowser.db config set --port 9978</span><br></pre></td></tr></table></figure>
<p>设置语言环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filebrowser -d &#x2F;etc&#x2F;filebrowser.db config set --locale zh-cn</span><br></pre></td></tr></table></figure>
<p>设置日志位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filebrowser -d &#x2F;etc&#x2F;filebrowser.db config set --log &#x2F;var&#x2F;log&#x2F;filebrowser.log</span><br></pre></td></tr></table></figure>
<p>用户名密码换成您自己的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filebrowser -d &#x2F;etc&#x2F;filebrowser.db users add 用户名 密码 --perm.admin</span><br></pre></td></tr></table></figure>
<p>上述配置完成后，启动执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filebrowser -d &#x2F;etc&#x2F;filebrowser.db</span><br></pre></td></tr></table></figure>

<p>启动成功后在浏览器输入 IP:端口，示例：http://您的vps的IP地址.1:9978就可以看到上面那个个人网盘登录界面了</p>
<hr>
<hr>
<p><strong>将File Browser配置成一个服务让它后台运行</strong></p>
<p>下载 File Browser 的 service 文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;cdn.mivm.cn&#x2F;www.mivm.cn&#x2F;archives&#x2F;filebrowser&#x2F;filebrowser.service -o &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;filebrowser.service</span><br></pre></td></tr></table></figure>

<p>加载配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<p>设置开机自启动：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable filebrowser.service</span><br></pre></td></tr></table></figure>

<p>下面是一些命令：</p>
<p>运行：systemctl start filebrowser.service<br>停止：systemctl stop filebrowser.service<br>重启：systemctl restart filebrowser.service<br>查看运行状态：systemctl status filebrowser.service</p>
<p><strong>caddy++filebrowser搭配：</strong><br>修改caddy配置文件,其实就是加了一行：proxy / 127.0.0.1:9978，注意端口号9978就是上面那个端口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;http:&#x2F;&#x2F;您的域名:80  &#123;</span><br><span class="line">      redir https:&#x2F;&#x2F;您的域名:443&#123;url&#125;</span><br><span class="line">&#125; </span><br><span class="line">https:&#x2F;&#x2F;您的域名:443  &#123;  </span><br><span class="line">        gzip  </span><br><span class="line">	timeouts none</span><br><span class="line">	tls 您的邮箱</span><br><span class="line">   root &#x2F;var&#x2F;www&#x2F;您的域名</span><br><span class="line">   forwardproxy &#123;</span><br><span class="line">        hide_ip</span><br><span class="line">        hide_via</span><br><span class="line">       basicauth 你的用户名 你的密码</span><br><span class="line">    &#125;</span><br><span class="line">   proxy &#x2F; 127.0.0.1:9978</span><br><span class="line">&#125;&quot; &gt; &#x2F;etc&#x2F;caddy&#x2F;Caddyfile</span><br></pre></td></tr></table></figure>
<p>重启caddy</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">supervisorctl restart caddy</span><br></pre></td></tr></table></figure>
<p>启动成功后在浏览器输入 IP:端口，示例：http://您的vps的IP地址.1:9978就可以看到上面那个个人网盘登录界面了。大功告成了！</p>
]]></content>
  </entry>
  <entry>
    <title>无敌了！ssr+tls+caddy+bbr一键搭建</title>
    <url>/2020/03/05/%E6%97%A0%E6%95%8C%E4%BA%86%EF%BC%81ssr-tls-caddy-bbr%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>由于很多萌新对配置caddy不是特别熟悉，所以整理了一个ssr+tls+acddy+bbr+网站网站的一键搭建的脚本，供大家参考。</strong></p>
<h3 id="支持平台："><a href="#支持平台：" class="headerlink" title="支持平台："></a>支持平台：</h3><p><strong>Debian  9、10—测完<br>Ubuntu 18.04、19.10<br>Centos  7</strong></p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p><strong>1.一个域名，推荐namesio(便宜，续费费用不会增加)<br>2.购买vps，本例以谷歌云为例</strong></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>切换到root用户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure>
<p>再执行一键搭建脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;JeannieStudio&#x2F;jeannie&#x2F;master&#x2F;ssr-caddy-tls.sh)&quot;</span><br></pre></td></tr></table></figure>
<p>安装bbr（只是锦上添花，不安装也可以出国）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;chiakge&#x2F;Linux-NetSpeed&#x2F;master&#x2F;tcp.sh&quot;</span><br><span class="line">chmod +x tcp.sh</span><br><span class="line">.&#x2F;tcp.sh</span><br></pre></td></tr></table></figure>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>别忘了创建防火墙规则，放行80、443这四个端口的出入站，不然，额……你不让人家过，人家怎么帮你转发流量，自然也上不了网喽！</p>
<p><strong>视频链接：</strong><br><strong>订阅本频道：<a href="https://bit.ly/2X042ea" target="_blank" rel="noopener">https://bit.ly/2X042ea</a></strong></p>
]]></content>
  </entry>
  <entry>
    <title>ssr+tls+caddy仍然稳得一批</title>
    <url>/2020/02/26/ssr+tls+caddy%E4%BB%8D%E7%84%B6%E7%A8%B3%E5%BE%97%E4%B8%80%E6%89%B9/</url>
    <content><![CDATA[<h2 id="Caddy与Nginx对比："><a href="#Caddy与Nginx对比：" class="headerlink" title="Caddy与Nginx对比："></a>Caddy与Nginx对比：</h2><p>caddy具有以下优点：<br>1.go语言写的可以跨平台，无需安装任何依赖。<br>2.安装和配置简单，不管你是新的web开发者，还是专业人士，都能够快速上手。<br>3.默认使用Let’s Encrypt提供的免费证书，自动让网站升级到HTTPS。最重要的是可以自动更新证书，永远不担心证书过期哟。<br>4.更合个人小型项目。</p>
<p>Ngnix的优点：<br>性能更好，适合做大型项目服务器。</p>
<h2 id="caddy安装和配置："><a href="#caddy安装和配置：" class="headerlink" title="caddy安装和配置："></a>caddy安装和配置：</h2><h3 id="下载："><a href="#下载：" class="headerlink" title="下载："></a>下载：</h3><p>caddy官方下载地址：<a href="https://caddyserver.com/v1/download" target="_blank" rel="noopener">https://caddyserver.com/v1/download</a></p>
<p>可以看到caddy官方脚本是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;getcaddy.com | bash -s personal</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/caddy1.jpg?raw=true" alt="脚本"></p>
<h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><p>执行脚本安装即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;getcaddy.com | bash -s personal</span><br></pre></td></tr></table></figure>

<p>安装完成后，运行以下命令查询caddy安装目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">which caddy</span><br></pre></td></tr></table></figure>

<p>安装目录为：<strong>/usr/local/bin/caddy</strong> 。</p>
<p>启动caddy执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">caddy</span><br></pre></td></tr></table></figure>

<p>停止caddy执行重启vps命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>


<h3 id="caddy配置"><a href="#caddy配置" class="headerlink" title="caddy配置"></a>caddy配置</h3><p><a href="https://jeanniestudio.github.io/2020/02/14/%E4%BD%BF%E7%94%A8WINSCP%E8%BF%9E%E6%8E%A5VPS%E6%95%99%E7%A8%8B--%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC/">winscp连接vps教程：</a></p>
<p>用winscp连接vps后，在/etc目录下创建caddy目录，之后创建名为Caddyfile的文件，文件内容如下：</p>
<p><strong>注意：域名、端口和邮箱改成自己的。</strong></p>
<p><strong>Caddyfile文件填写如下内容：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;example.com:1234:80这里有空格 &#123;</span><br><span class="line"></span><br><span class="line"> redir https:&#x2F;&#x2F;example.com:1234&#123;url&#125;</span><br><span class="line">&#125;</span><br><span class="line">https:&#x2F;&#x2F;example.com:1234 这里有空格&#123;</span><br><span class="line">gzip</span><br><span class="line">tls example@example.com</span><br><span class="line">root &#x2F;var&#x2F;www&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Caddy自动申请SSL证书位置：/root/.caddy/acme/acme-v01.api.letsencrypt.org/sites/xxx.xxx(域名)/</strong></p>
<h2 id="SSR-安装"><a href="#SSR-安装" class="headerlink" title="SSR 安装"></a>SSR 安装</h2><p><strong>执行下列四合一脚本，并选择： ShadowsocksR进行安装：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocks-all.sh https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;teddysun&#x2F;shadowsocks_install&#x2F;master&#x2F;shadowsocks-all.sh</span><br><span class="line">chmod +x shadowsocks-all.sh</span><br><span class="line">.&#x2F;shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure>

<p><strong>注：<br>“method”为 “none”,<br>“protocol”选择”auth_chain_a”,<br>“obfs”选择tls1.2_ticket_auth”</strong></p>
<p><strong>各版本的管理命令如下：</strong></p>
<p>启动、关闭、重启、状态</p>
<p> Shadowsocks-Python：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;shadowsocks-python start|stop|restart|status</span><br></pre></td></tr></table></figure>

<p> ShadowsocksR:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;shadowsocks-r start|stop|restart|status</span><br></pre></td></tr></table></figure>

<p>Shadowsocks-Go:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;shadowsocks-go start|stop|restart|status</span><br></pre></td></tr></table></figure>

<p> Shadowsocks-libev:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;shadowsocks-libev start|stop|restart|status</span><br></pre></td></tr></table></figure>

<p><strong>各版本默认配置文件</strong></p>
<p>Shadowsocks-Python</p>
<p>/etc/shadowsocks-python/config.json</p>
<p>ShadowsocksR</p>
<p>/etc/shadowsocks-r/config.json</p>
<p>Shadowsocks-Go</p>
<p>/etc/shadowsocks-go/config.json</p>
<p>Shadowsocks-libev</p>
<p>/etc/shadowsocks-libev/config.json</p>
<h2 id="ssr配置"><a href="#ssr配置" class="headerlink" title="ssr配置:"></a>ssr配置:</h2><p><strong>修改配置文件：/etc/shadowsocks-r/config.json，只需要修改2处：</strong></p>
<p>1.”server_port”: 端口改为443</p>
<p>2.将”redirect”: “”改为：<br>“redirect”: [“*:443#127.0.0.1:1234”]<br> 添加这一句，注意1234这个端口号要和Caddyfile里的端口保持一致。</p>
<p><strong>修改好后重启ssr: /etc/init.d/shadowsocks-r restart.</strong></p>
<p>大功告成！！！</p>
<h2 id="捐助本站"><a href="#捐助本站" class="headerlink" title="捐助本站"></a>捐助本站</h2><p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E6%8D%90%E5%8A%A92.png?raw=true" alt="二维码"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title>一键搭建Trojan</title>
    <url>/2020/02/20/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BATrojan/</url>
    <content><![CDATA[<h2 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h2><p><strong>1.准备一台vps</strong>（<a href="https://youtu.be/YvyMHNxapV0" target="_blank" rel="noopener">教程链接</a>）</p>
<p><strong>2.申请一个域名</strong>（<a href="https://youtu.be/VZJF-POGKVU" target="_blank" rel="noopener">教程链接</a>）</p>
<p><strong>3.域名解析</strong>（<a href="https://youtu.be/YvyMHNxapV0" target="_blank" rel="noopener">教程链接</a>） </p>
<h2 id="安装-Trojan"><a href="#安装-Trojan" class="headerlink" title="安装 Trojan"></a>安装 Trojan</h2><p>首先切换root用户，执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure>


<p>安装依赖包(Debian为例)，执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install sudo whiptail curl locales -y &amp;&amp; sudo -i</span><br></pre></td></tr></table></figure>


<p>执行一键安装脚本：（项目链接：<a href="https://github.com/johnrosen1/trojan-gfw-script" target="_blank" rel="noopener">https://github.com/johnrosen1/trojan-gfw-script</a>）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;johnrosen1&#x2F;trojan-gfw-script&#x2F;master&#x2F;vps.sh)&quot;</span><br></pre></td></tr></table></figure>

<p>到这一步的时候我把7、8、9、10下载相关的项都去掉了。如果你有这方面的需求可以不用去。</p>
<p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/001.jpg?raw=true" alt="如图"></p>
<p>这一步输入密码的时候，第一次搭建输入了一个非常复制的密码，搭建没有成功，不知道是不是自己输入的密码不符合脚本的规则，建议自动生成就行了。第二个密码也如此。</p>
<p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/002.jpg?raw=true" alt="如图"></p>
<p>这一步选择“否”即可，如果选择“是”还要去网站查安全码，比较麻烦。</p>
<p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/003.jpg?raw=true" alt="如图"></p>
<p><strong>其他步骤都默认安装就行了。</strong></p>
<h2 id="Trojan客户端"><a href="#Trojan客户端" class="headerlink" title="Trojan客户端"></a>Trojan客户端</h2><p><strong>windows客户端：</strong></p>
<p><a href="https://github.com/trojan-gfw/trojan/releases" target="_blank" rel="noopener">https://github.com/trojan-gfw/trojan/releases</a></p>
<p><strong>配置和使用：</strong><br>下载trojan-1.14.1-win.zip后解压，配置config.json</p>
<p><strong>只需修改2处：<br>1.”remote_addr”: 换成自己的域名；<br>2.”password”:换成自己第一次输入的密码即可（如果是自动生成，结果页面会显示该密码）</strong></p>
<p>修改完保存，运行trojan.exe即可，但这样还不能科学上网，还需要运行v2rayN才行。原因是trojan只支持socks，所以要把https转换为socks流量，而且v2rayN还可以分流。</p>
<p>下载v2rayN-core:<br><a href="https://github.com/2dust/v2rayN/releases/latest" target="_blank" rel="noopener">https://github.com/2dust/v2rayN/releases/latest</a></p>
<p>解压后运行v2rayN.exe，按下图填写：</p>
<p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/v2%E9%85%8D%E7%BD%AE001.jpg?raw=true" alt="v2ray配置"></p>
<p> 其中端口可以改，但必须和trojan客户端的配置文件中的”local_port”保持一致。</p>
<p> 别忘了打开http代理，大功告成！！！</p>
<p><strong>苹果端：</strong></p>
<p>下载shadowroket，苹果商店售价：$2.99，作者再某宝上买的小火箭兑换码，花了3.99人民币。</p>
<p>配置非常简单，添加服务，扫描trojan搭建完成后生成的二维码即可。</p>
<p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/ios01.jpg?raw=true" alt="如图"></p>
<p><strong>安卓端：</strong></p>
<p>从下面链接下载app-release.apk，完成后安装，安装完成后只需填入域名和密码1就可以了。<a href="https://github.com/trojan-gfw/igniter/releases" target="_blank" rel="noopener">https://github.com/trojan-gfw/igniter/releases</a></p>
<p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E5%AE%89%E5%8D%9301----.jpg?raw=true" alt="如图"></p>
<h2 id="捐助本站"><a href="#捐助本站" class="headerlink" title="捐助本站"></a>捐助本站</h2><p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E6%8D%90%E5%8A%A92.png?raw=true" alt="二维码"></p>
]]></content>
  </entry>
  <entry>
    <title>windows传文件到linux</title>
    <url>/2020/02/20/windows%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0Linux/</url>
    <content><![CDATA[<h4 id="打开cmd-执行"><a href="#打开cmd-执行" class="headerlink" title="打开cmd,执行"></a>打开cmd,执行</h4><p>修改/etc/ssh/sshd_config文件的<br>PasswordAuthentication no改为yes</p>
<p>使用如下指令重启 SSH 服务：<br>service sshd restart</p>
<h4 id="打开cmd-执行-1"><a href="#打开cmd-执行-1" class="headerlink" title="打开cmd,执行"></a>打开cmd,执行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pscp -P 22 trojan-go_install.sh root@34.123.143.11:&#x2F;root</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>如何查看linux系统内核版本和发型版本？</title>
    <url>/2020/02/19/%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8Blinux%E7%B3%BB%E7%BB%9F%E5%86%85%E6%A0%B8%E7%89%88%E6%9C%AC%E5%92%8C%E5%8F%91%E5%9E%8B%E7%89%88%E6%9C%AC%EF%BC%9F/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>linux内核是系统的心脏，可以将内核比喻成：汽车的发动。</strong></p>
<p><strong>可以将发型版本比喻成：发动机+轮胎+外壳+……组成的不同品牌的汽车。</strong></p>
<p><strong>比如下图，大众CFE发动机+其他零部件可以组装成速腾、高尔夫、朗逸、宝来等汽车。</strong></p>
<p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E8%B0%B7%E6%AD%8C%E4%BA%91/%E5%8F%91%E5%8A%A8%E6%9C%BA%E6%AF%94%E5%96%BB.jpg?raw=true" alt="如图"></p>
<p><strong>同样，linux内核+其他应用程序组成了Redhat、Debian、CentOS、ubuntu。</strong></p>
<p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E8%B0%B7%E6%AD%8C%E4%BA%91/linux%E6%AF%94%E5%96%BB.jpg?raw=true" alt="如图"></p>
<h2 id="查看Linux内核版本命令"><a href="#查看Linux内核版本命令" class="headerlink" title="查看Linux内核版本命令"></a>查看Linux内核版本命令</h2><p><strong>命令1：</strong>  <code>cat /proc/version</code></p>
<p><strong>显示：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Linux version 4.14.129-bbrplus (root@vultr.guest) (gcc version 6.3.0 20170516 (Debian 6.3.0-18+deb9u1)) #1 SMP Mon Jun 24 16:51:05 UTC 2019</span><br></pre></td></tr></table></figure>

<p><strong>命令2：</strong>  <code>uname -a</code></p>
<p><strong>显示：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Linux trojan001 4.9.0-12-amd64 #1 SMP Debian 4.9.210-1 (2020-01-20) x86_64 GNU&#x2F;Linux</span><br></pre></td></tr></table></figure>


<p><strong>命令3：</strong>  <code>uname -r</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4.9.0-12-amd64</span><br></pre></td></tr></table></figure>


<h2 id="查看Linux发型版本信息"><a href="#查看Linux发型版本信息" class="headerlink" title="查看Linux发型版本信息"></a>查看Linux发型版本信息</h2><p><strong>命令1：</strong> <code>cat /etc/issue</code></p>
<p><strong>显示：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Debian GNU&#x2F;Linux 9 \n \l</span><br></pre></td></tr></table></figure>

<p><strong>命令2：</strong><code>cat /etc/lsb-release</code></p>
<p><strong>显示：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Distributor ID: Debian</span><br><span class="line">Description:    Debian GNU&#x2F;Linux 9.12 (stretch)</span><br><span class="line">Release:        9.12</span><br><span class="line">Codename:       stretch</span><br></pre></td></tr></table></figure>
<h2 id="捐助本站"><a href="#捐助本站" class="headerlink" title="捐助本站"></a>捐助本站</h2><p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E6%8D%90%E5%8A%A92.png?raw=true" alt="二维码"></p>
]]></content>
  </entry>
  <entry>
    <title>最坚挺的出国方式：v2ray+CDN+Ngnix+Websocket</title>
    <url>/2020/02/15/%E6%9C%80%E5%9D%9A%E6%8C%BA%E5%87%BA%E5%9B%BD%E6%96%B9%E5%BC%8F%EF%BC%9Av2ray+CDN+Ngnix+websocket/</url>
    <content><![CDATA[<h2 id="一、开启BBR"><a href="#一、开启BBR" class="headerlink" title="一、开启BBR"></a>一、开启BBR</h2><p><strong>Debian9 自带BBR，所以可以直接通过参数开启BBR加速。打开/etc/sysctl.conf，添加以下2行代码：</strong></p>
<p>说明：作者习惯用windows连接工具登录到vps进行修改，下面链接是WINSCP连接VPS的教程，喜欢的小伙伴可以去看看。<br>  <a href="https://jeanniestudio.github.io/2020/02/14/%E4%BD%BF%E7%94%A8WINSCP%E8%BF%9E%E6%8E%A5VPS%E6%95%99%E7%A8%8B--%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC/">winscp工具使用教程</a><br>  <a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net.core.default_qdisc&#x3D;fq</span><br><span class="line">net.ipv4.tcp_congestion_control&#x3D;bbr</span><br></pre></td></tr></table></figure>
<p><strong>添加并保存，完成之后别忘了执行以下命令重启：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>
<h2 id="二、安装v2ray"><a href="#二、安装v2ray" class="headerlink" title="二、安装v2ray"></a>二、安装v2ray</h2><p><strong>首先打开 vm 实例的 ssh 终端，依次执行以下命令：</strong></p>
<p><em>1.切换成root用户</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure>
<p><em>2.查看当前时间</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date -R</span><br></pre></td></tr></table></figure>
<p><em>3.同步本地时间</em> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime</span><br></pre></td></tr></table></figure>

<p><em>4.执行一键安装脚本</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -L -s https:&#x2F;&#x2F;install.direct&#x2F;go.sh)</span><br></pre></td></tr></table></figure>

<p><strong>终端显示”V2Ray v4.22.1 is installed.”，表示安装完成。</strong><br><strong>v2ray相关命令：</strong></p>
<p>| 启动：  | service v2ray start |<br>| 停止：      | service v2ray stop |<br>|查看状态：  | service v2ray status |<br>| 重启： | service v2ray restart |<br>| 重载： |service v2ray reload  |<br>| 强行重载： | service v2ray force-reload |</p>
<h2 id="三、安装Ngnix"><a href="#三、安装Ngnix" class="headerlink" title="三、安装Ngnix"></a>三、安装Ngnix</h2><p><em>安装命令：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install nginx</span><br></pre></td></tr></table></figure>
<p><em>重启Ngnix命令：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure>
<p><em>检查Ngnix状态命令：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure>
<p>打开浏览器，访问vps的ip地址，出现欢迎页面。</p>
<p>Nginx 配置文件目录： /etc/nginx/sites-available<br>Nginx 默认网页文件目录/var/www/html 存放着 Nginx 的默认主页（欢迎页）</p>
<p><strong>将/etc/nginx/sites-available 的defaut里面的内容全部删除，复制下面这段放到default中。<br>访问自己的域名，出现欢迎页面即说明解析成功。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">        listen 80 default_server;</span><br><span class="line"></span><br><span class="line">        listen [::]:80 default_server;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">        server_name mydomain.me; #这里修改成自己的域名即可。</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line"></span><br><span class="line">                # First attempt to serve request as file, then</span><br><span class="line"></span><br><span class="line">                # as directory, then fall back to displaying a 404.</span><br><span class="line"></span><br><span class="line">                try_files $uri $uri&#x2F; &#x3D;404;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<h2 id="四、-TLS证书"><a href="#四、-TLS证书" class="headerlink" title="四、 TLS证书"></a>四、 TLS证书</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p> 证书的生成有许多方法，这里使用的是比较简单的方法：使用 acme.sh 脚本生成。</p>
<p> <strong>注意：针对debian9系统，在执行安装acme.sh脚本之前，需要提前安装必备软件包。不然会有提示”It is recommended to install socat first”等错误信息提示。</strong></p>
<p><em>必备软件包安装执行命令：</em></p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install curl -y &amp;&amp; apt-get install cron -y &amp;&amp; apt-get install socat -y</span><br></pre></td></tr></table></figure>
<h3 id="安装-acme-sh"><a href="#安装-acme-sh" class="headerlink" title="安装 acme.sh"></a>安装 acme.sh</h3><p><em>执行以下命令：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl  https:&#x2F;&#x2F;get.acme.sh | sh</span><br></pre></td></tr></table></figure>

<p><em>安装成功后执行 以下命令，以确保脚本所设置的命令别名生效：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>

<p>如果安装报错，那么可能是因为系统缺少 acme.sh 所需要的依赖项，acme.sh 的依赖项主要是 netcat(nc)，我们通过以下命令来安装这些依赖项，然后重新安装一遍 acme.sh:<strong>（注：debian9在安装过程中没有报错，所以这步不需要执行）</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get -y install netcat</span><br></pre></td></tr></table></figure>

<p>以下的命令会临时监听 80 端口，而80端口被Ngnix服务占用，所以要暂停Ngnix服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl stop nginx</span><br></pre></td></tr></table></figure>


<h3 id="生成证书（注意：脚本中的域名改成自己的）"><a href="#生成证书（注意：脚本中的域名改成自己的）" class="headerlink" title="生成证书（注意：脚本中的域名改成自己的）"></a>生成证书（注意：脚本中的域名改成自己的）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;.acme.sh&#x2F;acme.sh --issue -d mydomain.me --standalone -k ec-256</span><br></pre></td></tr></table></figure>
<p><strong>证书自动生成到 /etc/v2ray/ 文件夹，可以自行查阅。</strong></p>
<h3 id="证书更新（脚本自动）"><a href="#证书更新（脚本自动）" class="headerlink" title="证书更新（脚本自动）"></a>证书更新（脚本自动）</h3><p>由于 Let’s Encrypt 的证书有效期只有 3 个月，因此需要 90 天至少要更新一次证书，acme.sh 脚本会每 60 天自动更新证书。所以这步不需要做。<strong>（但如果你不放心，也把手动更新的指令提供一下，供参考。）</strong></p>
<p><em>手动更新 ECC 证书，执行：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;.acme.sh&#x2F;acme.sh --renew -d mydomain.com --force --ecc</span><br></pre></td></tr></table></figure>

<p><em>如果是 RSA 证书则执行：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ~&#x2F;.acme.sh&#x2F;acme.sh --renew -d mydomain.com --force</span><br></pre></td></tr></table></figure>

<p>由于本例中将证书生成到 /etc/v2ray/ 文件夹，更新证书之后还得把新证书生成到 /etc/v2ray。</p>
<h3 id="安装证书和密钥（ECC和RSA二选一）"><a href="#安装证书和密钥（ECC和RSA二选一）" class="headerlink" title="安装证书和密钥（ECC和RSA二选一）"></a>安装证书和密钥（ECC和RSA二选一）</h3><p>ECC优点：同等长度 ECC 比 RSA 更安全<br>ECC缺点：兼容性会差一些，Android 4.x 以下和 Windows XP 不支持。</p>
<p><strong>只要您的设备不是非常老的老古董，建议使用 ECC 证书。</strong></p>
<p><em>ECC 证书将证书和密钥安装到 /etc/v2ray 中执行：（注意：脚本中的域名改成自己的）</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo ~&#x2F;.acme.sh&#x2F;acme.sh --installcert -d mydomain.me --fullchainpath &#x2F;etc&#x2F;v2ray&#x2F;v2ray.crt --keypath &#x2F;etc&#x2F;v2ray&#x2F;v2ray.key --ecc</span><br></pre></td></tr></table></figure>

<p><em>RSA 证书执行：（这条列出来供参考，别执行）</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo ~&#x2F;.acme.sh&#x2F;acme.sh --installcert -d mydomain.me --fullchainpath &#x2F;etc&#x2F;v2ray&#x2F;v2ray.crt --keypath &#x2F;etc&#x2F;v2ray&#x2F;v2ray.key</span><br></pre></td></tr></table></figure>

<p><strong>注意：无论什么情况，密钥(即上面的v2ray.key)都不能泄漏，如果你不幸泄漏了密钥，可以使用 acme.sh 将原证书吊销，再生成新的证书，吊销方法请自行参考 acme.sh 的手册。</strong></p>
<h2 id="五、配置"><a href="#五、配置" class="headerlink" title="五、配置"></a>五、配置</h2><h3 id="v2ray服务端"><a href="#v2ray服务端" class="headerlink" title="v2ray服务端"></a>v2ray服务端</h3><p>最终v2ray服务端的配置只需要复制下面这一段，把/etc/v2ray下面的config.json里的内容全部删除，用这一段替换。注意有些需要修改成自己的（<strong>port、id、alterid、path需要修改</strong>）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;inbounds&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;port&quot;: 10000,  &#x2F;&#x2F;这个端口自己修改一下</span><br><span class="line">      &quot;listen&quot;:&quot;127.0.0.1&quot;,&#x2F;&#x2F;只监听 127.0.0.1，避免除本机外的机器探测到开放了 10000 端口</span><br><span class="line">      &quot;protocol&quot;: &quot;vmess&quot;,</span><br><span class="line">      &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;clients&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;id&quot;: &quot;b831381d-6324-4d53-ad4f-8cda48b30811&quot;, &#x2F;&#x2F;id自行修改，但保证位数一致</span><br><span class="line">            &quot;alterId&quot;: 64 &#x2F;&#x2F;自行修改</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;streamSettings&quot;: &#123;</span><br><span class="line">        &quot;network&quot;: &quot;ws&quot;,</span><br><span class="line">        &quot;wsSettings&quot;: &#123;</span><br><span class="line">        &quot;path&quot;: &quot;&#x2F;ray&#x2F;&quot;       &#x2F;&#x2F;注意：这里也改成自己的，2条斜杠别漏了</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;outbounds&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;protocol&quot;: &quot;freedom&quot;,</span><br><span class="line">      &quot;settings&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Ngnix配置"><a href="#Ngnix配置" class="headerlink" title="Ngnix配置"></a>Ngnix配置</h3><p>将/etc/nginx/sites-available 的defaut里面的内容全部删除，复制下面这段放到default中。<br>注意：需要修改location和proxy_pass这两项，和v2ray服务端保持一致。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen  443 ssl;</span><br><span class="line">  ssl on;</span><br><span class="line">  ssl_certificate       &#x2F;etc&#x2F;v2ray&#x2F;v2ray.crt;</span><br><span class="line">  ssl_certificate_key   &#x2F;etc&#x2F;v2ray&#x2F;v2ray.key;</span><br><span class="line">  ssl_protocols         TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">  ssl_ciphers           HIGH:!aNULL:!MD5;</span><br><span class="line">  server_name           mydomain.me;</span><br><span class="line">        location &#x2F;ray&#x2F; &#123; # 与 V2Ray服务端 配置中的 path 保持一致</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:10000;#这个端口和服务端保持一致</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line"></span><br><span class="line">        # Show realip in v2ray access.log</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：配置完成后别忘了重启v2ray和ngnix，上面有重启命令。</strong></p>
<h2 id="六、快乐出国"><a href="#六、快乐出国" class="headerlink" title="六、快乐出国"></a>六、快乐出国</h2><h3 id="PC端："><a href="#PC端：" class="headerlink" title="PC端："></a>PC端：</h3><p>v2ray客户端我们选择v2rayN（win64为例）</p>
<p><strong>下载 v2rayN-Core</strong><br>下载链接：<a href="https://github.com/2dust/v2rayN/releases/latest" target="_blank" rel="noopener">https://github.com/2dust/v2rayN/releases/latest</a></p>
<p>然后选择 v2rayN-Core.zip 下载,下载完成后，按如下步骤进行配置：</p>
<ol>
<li>解压。</li>
<li>运行v2rayN.exe。</li>
<li>双击v2rayN图标，打开图形界面，点击“服务器”–“添加[VMess]服务器”</li>
<li>按下图配置客户端，填完后保存。</li>
</ol>
<p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E8%B0%B7%E6%AD%8C%E4%BA%91/v001.jpg?raw=true" alt="如图"></p>
<ol start="5">
<li>然后在v2ray图标上点击右键，选择开启http代理。大功告成！！！</li>
</ol>
<h3 id="iOS客户端："><a href="#iOS客户端：" class="headerlink" title="iOS客户端："></a>iOS客户端：</h3><p>ios客户端有：</p>
<ol>
<li><p>Kitsuneb，目前售价$4.99；</p>
</li>
<li><p>Quantumult，目前售价$3.99。</p>
</li>
</ol>
<p>作者用的是Quantumult，某宝上有兑换码，搜关键字：Quantumult 兑换码就出来了，售价2.99人民币，作者用了个某宝红包，最后只花了8毛钱搞定。</p>
<p><strong>注意：App Store账号必须是美区的id。</strong></p>
<h3 id="安卓客户端："><a href="#安卓客户端：" class="headerlink" title="安卓客户端："></a>安卓客户端：</h3><p>安卓客户端使用v2rayNG：<br>项目地址 : <a href="https://github.com/2dust/v2rayNG/releases" target="_blank" rel="noopener">https://github.com/2dust/v2rayNG/releases</a><br>这是工具是免费的。</p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>全部过程搭建好以后，频繁报下面这个错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v2ray.com&#x2F;core&#x2F;app&#x2F;proxyman&#x2F;outbound: failed to process outbound traffic &gt; v2ray.com&#x2F;core&#x2F;proxy&#x2F;vmess&#x2F;outbound: failed to find an available destination &gt; v2ray.com&#x2F;core&#x2F;common&#x2F;retry: [v2ray.com&#x2F;core&#x2F;transport&#x2F;internet&#x2F;websocket: failed to dial WebSocket &gt; v2ray.com&#x2F;core&#x2F;transport&#x2F;internet&#x2F;websocket: failed to dial to (wss:&#x2F;&#x2F;我的域名&#x2F;download&#x2F;):  &gt; dial tcp 这里是ip地址:443: i&#x2F;o timeout v2ray.com&#x2F;core&#x2F;transport&#x2F;internet&#x2F;websocket: failed to dial WebSocket &gt; v2ray.com&#x2F;core&#x2F;transport&#x2F;internet&#x2F;websocket: failed to dial to (wss:&#x2F;&#x2F;我的域名&#x2F;download&#x2F;):  &gt; dial tcp: operation was canceled] &gt; v2ray.com&#x2F;core&#x2F;common&#x2F;retry: all retry attempts failed</span><br></pre></td></tr></table></figure>

<p>我的解决方法：将cloudflare里的cdn关闭就可以了。理论上cdn是加速的，但可能是cloudflare的服务器是国外的导致的。</p>
<h2 id="捐助本站"><a href="#捐助本站" class="headerlink" title="捐助本站"></a>捐助本站</h2><p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E6%8D%90%E5%8A%A92.png?raw=true" alt="二维码"></p>
]]></content>
  </entry>
  <entry>
    <title>使用XFTP连接VPS教程--一键脚本</title>
    <url>/2020/02/14/%E4%BD%BF%E7%94%A8WINSCP%E8%BF%9E%E6%8E%A5VPS%E6%95%99%E7%A8%8B--%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h4 id="XFTP工具下载"><a href="#XFTP工具下载" class="headerlink" title="XFTP工具下载"></a>XFTP工具下载</h4><p> 在谷歌云上创建好了vps后如何用第三方工具进行连接，从而实现文件的修改、上传和下载呢？这就用到了第三方工具XFTP，下面给出下载地址：<br>家庭/学校免费版本：(<a href="https://www.netsarang.com/zh/free-for-home-school/" target="_blank" rel="noopener">https://www.netsarang.com/zh/free-for-home-school/</a>)</p>
<h4 id="在vps上修改配置"><a href="#在vps上修改配置" class="headerlink" title="在vps上修改配置"></a>在vps上修改配置</h4><p>先切换到root执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure>

<p>再执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;JeannieStudio&#x2F;jeannie&#x2F;master&#x2F;addpwd.sh)&quot;</span><br></pre></td></tr></table></figure>

<h4 id="用XFTP连接vps"><a href="#用XFTP连接vps" class="headerlink" title="用XFTP连接vps"></a>用XFTP连接vps</h4><p>打开XFTP新建会话，协议选择：SFTP，ip输入vps的IP地址即可，用户名root,密码为刚刚设置的密码。</p>
<h4 id="捐助本站"><a href="#捐助本站" class="headerlink" title="捐助本站"></a>捐助本站</h4><p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E6%8D%90%E5%8A%A92.png?raw=true" alt="二维码"></p>
]]></content>
  </entry>
  <entry>
    <title>使用Winscp连接VPS教程</title>
    <url>/2020/02/14/%E4%BD%BF%E7%94%A8WINSCP%E8%BF%9E%E6%8E%A5VPS%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="winscp工具下载"><a href="#winscp工具下载" class="headerlink" title="winscp工具下载"></a>winscp工具下载</h2><p> 在谷歌云上创建好了vps后如何用第三方工具进行连接，从而实现文件的修改、上传和下载呢？这就用到了第三方工具WINSCP，下面给出下载地址：</p>
<p>绿色免安装版本：(<a href="http://winscp.net/download/WinSCP-5.15.9-Portable.zip" target="_blank" rel="noopener">http://winscp.net/download/WinSCP-5.15.9-Portable.zip</a>)</p>
<h2 id="去VPS修改配置"><a href="#去VPS修改配置" class="headerlink" title="去VPS修改配置"></a>去VPS修改配置</h2><h3 id="使用谷歌云自带的ssh登录vps-如图："><a href="#使用谷歌云自带的ssh登录vps-如图：" class="headerlink" title="使用谷歌云自带的ssh登录vps,如图："></a>使用谷歌云自带的ssh登录vps,如图：</h3><p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E8%B0%B7%E6%AD%8C%E4%BA%91%E8%87%AA%E5%B8%A6ssh.png?raw=true" alt="谷歌云自带ssh"></p>
<h3 id="获取root权限"><a href="#获取root权限" class="headerlink" title="获取root权限"></a>获取root权限</h3><p>连接到谷歌云vps后，首先获取root权限：</p>
<p>执行命令：<code>sudo -i</code></p>
<h3 id="修改sshd-config文件："><a href="#修改sshd-config文件：" class="headerlink" title="修改sshd_config文件："></a>修改sshd_config文件：</h3><p>执行命令：<code>vi /etc/ssh/sshd_config</code></p>
<p>如图：修改PermitRootLogin，将no改为为yes；<br>修改passwordAuthentication，将no改为yes；</p>
<p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E6%94%B9%E5%8A%A8%E8%BF%992%E5%A4%84.png?raw=true" alt="改动这2处"></p>
<p>修改的方法是，按键盘上的“i”键,切换到编辑模式，修改完成后，按2次键盘上的ESC键，切换到命令行模式，再按“:q”进行保存，退回命令行后：</p>
<h3 id="查看是否修改成功。"><a href="#查看是否修改成功。" class="headerlink" title="查看是否修改成功。"></a>查看是否修改成功。</h3><p>执行命令：<code>cat /etc/ssh/sshd_config</code><br><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E4%BF%AE%E6%94%B9%E6%88%90%E5%8A%9F.png?raw=true" alt="修改成功"></p>
<h3 id="给root用户添加密码"><a href="#给root用户添加密码" class="headerlink" title="给root用户添加密码"></a>给root用户添加密码</h3><p>执行命令：<code>passwd root</code><br><em>注意密码不回显（不要惊慌，哎呀我输入不了密码啊，哈哈哈哈</em>）</p>
<h3 id="重启sshd服务"><a href="#重启sshd服务" class="headerlink" title="重启sshd服务"></a>重启sshd服务</h3><p>执行命令：<code>/etc/init.d/ssh restart 或者 service sshd restart</code></p>
<h2 id="用winscp连接vps"><a href="#用winscp连接vps" class="headerlink" title="用winscp连接vps"></a>用winscp连接vps</h2><p>打开WINCSCP，协议选择：SCP，ip输入vps的IP地址即可，用户名root,密码为刚刚设置的密码。</p>
<p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E8%BF%9E%E6%8E%A5vps.png?raw=true" alt="连接vps"></p>
<h2 id="捐助本站"><a href="#捐助本站" class="headerlink" title="捐助本站"></a>捐助本站</h2><p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E6%8D%90%E5%8A%A92.png?raw=true" alt="二维码"></p>
]]></content>
  </entry>
  <entry>
    <title>一键搭建ssr+bbr</title>
    <url>/2019/12/30/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BAssr+bbr/</url>
    <content><![CDATA[<h2 id="创建vm实例"><a href="#创建vm实例" class="headerlink" title="创建vm实例"></a>创建vm实例</h2><h3 id="1-导航栏-Compute-Engine-VM实例，进入实例页面"><a href="#1-导航栏-Compute-Engine-VM实例，进入实例页面" class="headerlink" title="1.导航栏-Compute Engine-VM实例，进入实例页面"></a>1.导航栏-Compute Engine-VM实例，进入实例页面</h3><p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E8%B0%B7%E6%AD%8C%E4%BA%91/%E8%BF%9B%E5%85%A5%E9%A1%B5%E9%9D%A2.png?raw=true" alt="进入页面"></p>
<h3 id="2-点击“创建实例”按钮"><a href="#2-点击“创建实例”按钮" class="headerlink" title="2.点击“创建实例”按钮"></a>2.点击“创建实例”按钮</h3><p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E8%B0%B7%E6%AD%8C%E4%BA%91/%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B.png?raw=true" alt="创建实例"></p>
<h3 id="3-修改实例配置参数"><a href="#3-修改实例配置参数" class="headerlink" title="3.修改实例配置参数"></a>3.修改实例配置参数</h3><p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E8%B0%B7%E6%AD%8C%E4%BA%91/%E5%A1%AB%E5%86%99%E5%86%85%E5%AE%B91.png?raw=true" alt="需修改内容1"><br><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E8%B0%B7%E6%AD%8C%E4%BA%91/%E5%86%85%E5%AE%B9%E5%A1%AB%E5%86%992.png?raw=true" alt="需修改内容2"></p>
<h3 id="4-创建成功后测试速度"><a href="#4-创建成功后测试速度" class="headerlink" title="4.创建成功后测试速度"></a>4.创建成功后测试速度</h3><p>连接<a href="https://www.ipip.net/，选择ping工具测试网速情况，响应时间在100ms内可以接受" target="_blank" rel="noopener">https://www.ipip.net/，选择ping工具测试网速情况，响应时间在100ms内可以接受</a><br><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E8%B0%B7%E6%AD%8C%E4%BA%91/ping%E7%BB%93%E6%9E%9C.png?raw=true" alt="测速"></p>
<h2 id="一键搭建谷歌云"><a href="#一键搭建谷歌云" class="headerlink" title="一键搭建谷歌云"></a>一键搭建谷歌云</h2><h3 id="1-用谷歌云自带的ssh工具连接vps"><a href="#1-用谷歌云自带的ssh工具连接vps" class="headerlink" title="1.用谷歌云自带的ssh工具连接vps"></a>1.用谷歌云自带的ssh工具连接vps</h3><h3 id="2-切换到root用户下"><a href="#2-切换到root用户下" class="headerlink" title="2.切换到root用户下"></a>2.切换到root用户下</h3><p>使用命令：<code>sudo -i</code></p>
<h3 id="3-用秋水大神的一键脚本进行ssr的安装"><a href="#3-用秋水大神的一键脚本进行ssr的安装" class="headerlink" title="3.用秋水大神的一键脚本进行ssr的安装"></a>3.用秋水大神的一键脚本进行ssr的安装</h3><p>执行脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocks-all.sh https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;teddysun&#x2F;shadowsocks_install&#x2F;master&#x2F;shadowsocks-all.sh</span><br><span class="line">chmod +x shadowsocks-all.sh</span><br><span class="line">.&#x2F;shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E8%B0%B7%E6%AD%8C%E4%BA%91/%E5%8F%82%E6%95%B01.png?raw=true" alt="参数1"><br><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E8%B0%B7%E6%AD%8C%E4%BA%91/%E5%8F%82%E6%95%B02.png?raw=true" alt="参数2"><br><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E8%B0%B7%E6%AD%8C%E4%BA%91/%E7%BB%93%E6%9E%9C.jpg?raw=true" alt="结果"></p>
<p>当出现上图后，表示安装完成。<em>注意：请记下配置信息，以便客户端配置时使用。</em></p>
<h2 id="一键安装bbr"><a href="#一键安装bbr" class="headerlink" title="一键安装bbr"></a>一键安装bbr</h2><p>执行超级一键加速脚本，bbr 原版/魔改/plus/锐速 四合一脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget &quot;https:&#x2F;&#x2F;github.com&#x2F;chiakge&#x2F;Linux-NetSpeed&#x2F;raw&#x2F;master&#x2F;tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; .&#x2F;tcp.sh</span><br></pre></td></tr></table></figure>

<p>至于选择哪个bbr版本，看个人喜好，我一般选择bbr plus.<br><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E8%B0%B7%E6%AD%8C%E4%BA%91/bbr.png?raw=true" alt="结果"><br>至此，ssr+bbr搭建完成。</p>
<h2 id="安装客户端"><a href="#安装客户端" class="headerlink" title="安装客户端"></a>安装客户端</h2><p>下面演示在win10安装ssr客户端软件：</p>
<h2 id="捐助本站"><a href="#捐助本站" class="headerlink" title="捐助本站"></a>捐助本站</h2><p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E6%8D%90%E5%8A%A92.png?raw=true" alt="二维码"></p>
]]></content>
  </entry>
  <entry>
    <title>IntelliJ IDEA 安装golang 插件</title>
    <url>/2019/12/27/IntelliJ%20IDEA%20%E5%AE%89%E8%A3%85golang%20%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="go语言环境安装"><a href="#go语言环境安装" class="headerlink" title="go语言环境安装"></a>go语言环境安装</h2><p><em>详情可参考：</em>(<a href="https://www.runoob.com/go/go-environment.html" target="_blank" rel="noopener">https://www.runoob.com/go/go-environment.html</a>)</p>
<h2 id="IDEA-的官网下载"><a href="#IDEA-的官网下载" class="headerlink" title="IDEA 的官网下载"></a>IDEA 的官网下载</h2><p><em>社区版是免费的</em>：(<a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noopener">https://www.jetbrains.com/idea/download/</a>)</p>
<p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/2.png?raw=true" alt="下载地址"></p>
<h2 id="golang插件安装"><a href="#golang插件安装" class="headerlink" title="golang插件安装"></a>golang插件安装</h2><p>IDEA的golang插件是开源的，项目托管在github上面，下载最新版本并记录下COMPATIBLE BUILDS（*支持的版本号如：193.5662.53.103 *）</p>
<p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/3.png?raw=true" alt="下载地址"></p>
<p> 打开 IDEA 工具后，选择 “Configure” -&gt; “Plugins” </p>
<p> <img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/go-1.png?raw=true" alt="如图"></p>
<p>选择 “Install plugin from disk ..”，再选择刚才下载的IDEA go 插件压缩包（注意：压缩包无需解压;已进入 Intellij Idea，可通过 File -&gt; setting -&gt; plugins 安装插件）。</p>
<p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/5.png?raw=true" alt="如图"></p>
<p>另外还可以直接通过IDEA进行下载即可<br><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/4.png?raw=true" alt="如图"></p>
<h2 id="关联-GO-SDK"><a href="#关联-GO-SDK" class="headerlink" title="关联 GO SDK"></a>关联 GO SDK</h2><p>重启IDEA，”Configure”–&gt;”settings”–&gt;”Go”–&gt;”GoRoot”，选中本地安装go的目录<br><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/9.png?raw=true" alt="如图"></p>
<p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/7.png?raw=true" alt="如图"></p>
<p> 配置 GOPATH，（<em>也可在 windows 环境变量设置 GOPATH</em>）<br> <img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/8.png?raw=true" alt="如图"></p>
<p> 至此，Intellij Idea + GO SDK + GO Plugin 全部安装完毕！</p>
<h2 id="捐助本站"><a href="#捐助本站" class="headerlink" title="捐助本站"></a>捐助本站</h2><p><img src="https://github.com/JeannieStudio/jeanniestudio.images/blob/master/%E6%8D%90%E5%8A%A92.png?raw=true" alt="二维码"></p>
]]></content>
  </entry>
</search>
